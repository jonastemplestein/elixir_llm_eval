{"completion":"    Enum.any?(Enum.with_index(numbers), fn {num, idx} ->\n      Enum.any?(Enum.slice(numbers, idx + 1..-1), fn other_num ->\n        abs(num - other_num) < threshold\n      end)\n    end)\n  end\nend","task_id":"HumanEval/0","sample_id":0}
{"completion":"    paren_string\n    |> String.replace(\" \", \"\")\n    |> String.graphemes()\n    |> Enum.reduce({[], 0, []}, fn\n      \"(\", {groups, 0, current_group} -> {groups, 1, [\"(\"] ++ current_group}\n      \"(\", {groups, depth, current_group} -> {groups, depth + 1, [\"(\"] ++ current_group}\n      \")\", {groups, 1, current_group} -> {[Enum.join(current_group ++ [\")\"]) | groups], 0 , []}\n      \")\", {groups, depth ,current_group} -> {groups ,depth - 1 ,current_group ++ [\")\"]}\n       _, acc -> acc\n    end)\n    |> elem(0)\n    |> Enum.reverse()\nend\n\nend","task_id":"HumanEval/1","sample_id":0}
{"completion":"    number - trunc(number)\n  end\nend","task_id":"HumanEval/2","sample_id":0}
{"completion":"\n    Enum.reduce_while(operations, 0, fn operation, acc ->\n      new_balance = acc + operation\n      if new_balance < 0 do\n        {:halt, true}\n      else\n        {:cont, new_balance}\n      end\n    end) || false\n  end\n\nend","task_id":"HumanEval/3","sample_id":0}
{"completion":"    mean = Enum.sum(numbers) / Enum.count(numbers)\n    deviations = Enum.map(numbers, fn x -> abs(x - mean) end)\n    Enum.sum(deviations) / Enum.count(deviations)\n  end\nend","task_id":"HumanEval/4","sample_id":0}
{"completion":"    numbers\n    |> Enum.intersperse(delimeter)\n  end\nend","task_id":"HumanEval/5","sample_id":0}
{"completion":"    paren_string\n    |> String.split()\n    |> Enum.map(&max_nesting/1)\n  end\n\n  defp max_nesting(group) do\n    group\n    |> String.graphemes()\n    |> Enum.reduce({0, 0}, fn \n      \"(\", {depth, max_depth} -> {depth + 1, max(max_depth, depth + 1)}\n      \")\", {depth, max_depth} -> {depth - 1, max_depth}\n      _, acc -> acc\n    end)\n    |> elem(1)\n  end\nend","task_id":"HumanEval/6","sample_id":0}
{"completion":"    Enum.filter(strings, fn string -> String.contains?(string, substring) end)\n  end\nend","task_id":"HumanEval/7","sample_id":0}
{"completion":"    sum = Enum.sum(numbers)\n    product = Enum.reduce(numbers, 1, &(&1 * &2))\n    {sum, product}\n  end\nend","task_id":"HumanEval/8","sample_id":0}
{"completion":"    numbers |> Enum.reduce([], fn x, acc ->\n      case acc do\n        [] -> [x]\n        _ -> [max(x, List.last(acc)) | acc]\n      end\n    end) |> Enum.reverse()\n  end\nend","task_id":"HumanEval/9","sample_id":0}
{"completion":"    # Find the longest palindromic suffix\n    palindrome_suffix = string |> Stream.iterate(&String.slice(&1, 1..-1))\n                                |> Enum.find(&is_palindrome/1)\n\n    # Calculate the prefix that is not part of the palindromic suffix\n    prefix_length = String.length(string) - String.length(palindrome_suffix)\n    non_palindrome_prefix = String.slice(string, 0, prefix_length)\n\n    # Append reversed non-palindromic prefix to original string to form a palindrome\n    string <> String.reverse(non_palindrome_prefix)\n  end\nend","task_id":"HumanEval/10","sample_id":0}
{"completion":"    a_bin = String.to_integer(a, 2)\n    b_bin = String.to_integer(b, 2)\n    xor_result = Bitwise.bxor(a_bin, b_bin)\n    Integer.to_string(xor_result, 2) |> String.pad_leading(length(a), \"0\")\n  end\nend","task_id":"HumanEval/11","sample_id":0}
{"completion":"    case strings do\n      [] -> nil\n      _ -> Enum.max_by(strings, &String.length/1)\n    end\n  end\nend","task_id":"HumanEval/12","sample_id":0}
{"completion":"    if b == 0 do\n      abs(a)\n    else\n      greatest_common_divisor(b, rem(a, b))\n    end\n  end\nend","task_id":"HumanEval/13","sample_id":0}
{"completion":"    string\n    |> String.graphemes()\n    |> Enum.reduce([], fn grapheme, acc ->\n      [acc | [Enum.join([acc | [grapheme]])]]\n      |> List.flatten()\n      |> Enum.reverse()\n    end)\n  end\nend","task_id":"HumanEval/14","sample_id":0}
{"completion":"    Enum.join(Enum.to_list(0..n), \" \")\n  end\nend","task_id":"HumanEval/15","sample_id":0}
{"completion":"    string\n    |> String.downcase()\n    |> String.graphemes()\n    |> Enum.uniq()\n    |> length()\n  end\nend","task_id":"HumanEval/16","sample_id":0}
{"completion":"    music_string\n    |> String.split(~r/\\s+/, trim: true)\n    |> Enum.map(&parse_note/1)\n  end\n\n  defp parse_note(\"o\"), do: 4\n  defp parse_note(\"o|\"), do: 2\n  defp parse_note(\".|\"), do: 1\nend","task_id":"HumanEval/17","sample_id":0}
{"completion":"    if substring == \"\" do\n      0\n    else\n      string |> String.graphemes() |> Enum.reduce({0, 0}, fn grapheme, {count, index} ->\n        if String.starts_with?(String.slice(string, index..-1), substring) do\n          {count + 1, index + 1}\n        else\n          {count, index + 1}\n        end\n      end) |> elem(0)\n    end \n  end\n\nend","task_id":"HumanEval/18","sample_id":0}
{"completion":"\n    words_to_nums = %{\n      \"zero\" => 0, \"one\" => 1, \"two\" => 2, \"three\" => 3,\n      \"four\" => 4, \"five\" => 5, \"six\" => 6, \n      \"seven\" => 7, \"eight\"=>8,\"nine\"=>9\n    }\n\n    numbers\n    |> String.split()\n    |> Enum.map(&words_to_nums[&1])\n    |> Enum.sort()\n    |> Enum.map(fn num -> \n         words_to_nums\n         |> Enum.find(fn {word,num_word} -> num_word == num end)\n         |> elem(0)\n       end)\n    |> Enum.join(\" \")\n    \nend\n\nend","task_id":"HumanEval/19","sample_id":0}
{"completion":"    sorted_numbers = Enum.sort(numbers)\n    Enum.reduce(sorted_numbers, {nil, nil, :infinity}, fn x, {prev_num, closest_pair, smallest_diff} ->\n      case prev_num do\n        nil -> \n          {x, closest_pair, smallest_diff}\n        _ ->\n          diff = abs(prev_num - x)\n          if diff < smallest_diff do\n            {x, {prev_num, x}, diff}\n          else\n            {x, closest_pair, smallest_diff}\n          end\n      end\n    end)\n    |> elem(1)\n  end\nend","task_id":"HumanEval/20","sample_id":0}
{"completion":"    min = Enum.min(numbers)\n    max = Enum.max(numbers)\n    Enum.map(numbers, fn x -> (x - min) / (max - min) end)\n  end\nend","task_id":"HumanEval/21","sample_id":0}
{"completion":"    Enum.filter(values, fn value -> \n      is_integer(value)\n    end)\n  end\nend","task_id":"HumanEval/22","sample_id":0}
{"completion":"    String.length(string)\n  end\nend","task_id":"HumanEval/23","sample_id":0}
{"completion":"    (n - 1)..1 |> Enum.find(fn x -> rem(n, x) == 0 end)\n  end\nend","task_id":"HumanEval/24","sample_id":0}
{"completion":"    Enum.reduce_while(2..n, [], fn x, acc ->\n      if rem(n, x) == 0 do\n        {_, factors} = Stream.iterate(n, &div(&1, x))\n                             |> Enum.take_while(&rem(&1, x) == 0)\n                             |> Enum.reduce({0, []}, fn _, {count, factors} -> \n                                {count + 1, [x | factors]} end)\n        {:halt, Enum.reverse(factors)}\n      else\n        {:cont, acc}\n      end\n    end)\n  end\nend","task_id":"HumanEval/25","sample_id":0}
{"completion":"    numbers\n    |> Enum.frequencies()\n    |> Enum.filter(fn {_number, count} -> count == 1 end)\n    |> Enum.map(fn {number, _count} -> number end)\n  end\nend","task_id":"HumanEval/26","sample_id":0}
{"completion":"    String.graphemes(string)\n    |> Enum.map(fn char ->\n      if String.match?(char, ~r/[A-Z]/), do: String.downcase(char), else: String.upcase(char)\n    end)\n    |> Enum.join()\n  end\nend","task_id":"HumanEval/27","sample_id":0}
{"completion":"    Enum.join(strings, \"\")\n  end\nend","task_id":"HumanEval/28","sample_id":0}
{"completion":"    Enum.filter(strings, fn string -> String.starts_with?(string, prefix) end)\n  end\nend","task_id":"HumanEval/29","sample_id":0}
{"completion":"    Enum.filter(l, &(&1 > 0))\n  end\nend","task_id":"HumanEval/30","sample_id":0}
{"completion":"    if n <= 1 do\n      false\n    else\n      Enum.none?(2..:math.sqrt(n), fn x -> rem(n, x) == 0 end)\n    end\n  end\nend","task_id":"HumanEval/31","sample_id":0}
{"completion":"    # We will use a numerical method to find the zero, such as Newton's method.\n    # Define a small delta for the derivative approximation and an initial guess for x.\n    delta = 1e-6\n    guess = 0.0\n\n    # Define a function to compute the derivative of our polynomial at point x.\n    derivative = fn x ->\n      (poly(xs, x + delta) - poly(xs, x)) / delta\n    end\n\n    # Perform iterations to update our guess based on Newton's method.\n    Enum.reduce_while(1..1000, guess, fn _, acc ->\n      new_guess = acc - poly(xs, acc) / derivative.(acc)\n      if abs(new_guess - acc) < delta do\n        {:halt, new_guess}\n      else\n        {:cont, new_guess}\n      end\n    end)\n  end\nend","task_id":"HumanEval/32","sample_id":0}
{"completion":"    # Split the list into chunks of 3 elements each\n    chunks = Enum.chunk_every(l, 3, 3, :discard)\n    \n    # Sort the third elements of each chunk\n    sorted_thirds = Enum.map(chunks, fn [a, b, c] -> {a, b} end)\n                        |> List.flatten()\n                        |> Enum.concat(Enum.sort(Enum.map(chunks, fn chunk ->\n                          case chunk do\n                            [_a,_b,c] -> [c]\n                            _ -> []\n                          end\n                        end)))\n    \n    # Merge the sorted thirds back into their original positions in l\n    sorted_l = for {index,value} <- Enum.with_index(l), do: if rem(index+1 , 3) == 0,\n                                                              do: List.first(sorted_thirds),\n                                                              else: value\n    \n    # Remove used values from the sorted_thirds list to prevent duplicates.\n     |> Enum.reduce({[],sorted_thirds}, fn x,{acc,[h|t]} ->\n       if x == h,\n         do: {acc ++ [x], t},\n         else: {acc ++ [x], [h|t]}\n     end)\n     |> elem(0)\n\n   sorted_l \nend\n\n","task_id":"HumanEval/33","sample_id":0}
{"completion":"    l |> Enum.uniq() |> Enum.sort()\n  end\nend","task_id":"HumanEval/34","sample_id":0}
{"completion":"    Enum.max(l)\n  end\nend","task_id":"HumanEval/35","sample_id":0}
{"completion":"    Enum.reduce(1..n-1, 0, fn x, acc ->\n      if rem(x, 11) == 0 or rem(x, 13) == 0 do\n        acc + Enum.count(Integer.to_string(x), fn c -> c == '7' end)\n      else\n        acc\n      end\n    end)\n  end\nend","task_id":"HumanEval/36","sample_id":0}
{"completion":"    even_values = Enum.with_index(l)\n                      |> Enum.filter(fn {_value, index} -> rem(index, 2) == 1 end)\n                      |> Enum.map(fn {value, _index} -> value end)\n                      |> Enum.sort()\n\n    odd_values = Enum.with_index(l)\n                     |> Enum.filter(fn {_value, index} -> rem(index, 2) == 0 end)\n                     |> Enum.map(fn {value, _index} -> value end)\n\n    odd_values\n    |> Stream.zip(even_values)\n    |> Stream.concat()\n    |> Enum.to_list()\n  end\nend","task_id":"HumanEval/37","sample_id":0}
{"completion":"    s\n    |> String.graphemes()\n    |> Enum.chunk_every(3)\n    |> Enum.map(fn\n      [b, c, a] -> [a, b, c]\n      other -> other\n    end)\n    |> List.flatten()\n    |> Enum.join()\n  end\nend","task_id":"HumanEval/38","sample_id":0}
{"completion":"    fib_primes = Stream.unfold({0, 1}, fn {a, b} -> {a + b, {b, a + b}} end)\n                 |> Stream.filter(&is_prime/1)\n    \n    Enum.at(fib_primes, n - 1)\n  end\n\n  defp is_prime(2), do: true\n  defp is_prime(n) when n < 2 or rem(n, 2) == 0 do\n    false\n  end\n  defp is_prime(n) do\n    max_divisor = :math.sqrt(n) |> floor()\n    Enum.none?(3..max_divisor//2, &rem(n, &1) == 0)\n  end\n\nend","task_id":"HumanEval/39","sample_id":0}
{"completion":"    Enum.any?(Enum.combinations(l, 3), fn [a, b, c] -> a + b + c == 0 end)\n  end\nend","task_id":"HumanEval/40","sample_id":0}
{"completion":"    n * (n - 1) // 2\n  end\nend","task_id":"HumanEval/41","sample_id":0}
{"completion":"    Enum.map(l, &(&1 + 1))\n  end\nend","task_id":"HumanEval/42","sample_id":0}
{"completion":"    Enum.any?(l, fn x -> Enum.member?(l, -x) && x != 0 end)\n  end\nend","task_id":"HumanEval/43","sample_id":0}
{"completion":"    Integer.to_string(x, base)\n  end\nend","task_id":"HumanEval/44","sample_id":0}
{"completion":"    0.5 * a * h\n  end\nend","task_id":"HumanEval/45","sample_id":0}
{"completion":"    case n do\n      0 -> 0\n      1 -> 0\n      2 -> 2\n      3 -> 0\n      _ ->\n        fibs = Enum.reduce(4..n, [0,2,0,0], fn _, [a,b,c,d] ->\n          [b,c,d,a+b+c+d]\n        end)\n        List.last(fibs)\n    end \nend  ","task_id":"HumanEval/46","sample_id":0}
{"completion":"    sorted = Enum.sort(l)\n    len = length(sorted)\n\n    if rem(len, 2) == 0 do\n      mid1 = div(len, 2)\n      mid2 = mid1 + 1\n      (Enum.at(sorted, mid1 - 1) + Enum.at(sorted, mid2 - 1)) / 2\n    else\n      Enum.at(sorted, div(len, 2))\n    end\n  end\n\nend","task_id":"HumanEval/47","sample_id":0}
{"completion":"    text == String.reverse(text)\n  end\nend","task_id":"HumanEval/48","sample_id":0}
{"completion":"    pow(2, n) |> rem(p)\n  end\nend","task_id":"HumanEval/49","sample_id":0}
{"completion":"    s\n    |> String.to_charlist()\n    |> Enum.map(&((rem((&1 - 5 - ?a + 26), 26)) + ?a))\n    |> to_string()\n  end\nend","task_id":"HumanEval/50","sample_id":0}
{"completion":"    text |> String.replace(~r/[aeiouAEIOU]/, \"\")\n  end\nend","task_id":"HumanEval/51","sample_id":0}
{"completion":"    Enum.all?(l, fn x -> x < t end)\n  end\nend","task_id":"HumanEval/52","sample_id":0}
{"completion":"    x + y\n  end\nend","task_id":"HumanEval/53","sample_id":0}
{"completion":"    s0 |> String.graphemes() |> Enum.sort() |> Enum.uniq() ==\n    s1 |> String.graphemes() |> Enum.sort() |> Enum.uniq()\n  end\nend","task_id":"HumanEval/54","sample_id":0}
{"completion":"    case n do\n      0 -> 0\n      1 -> 1\n      _ -> fib(n - 1) + fib(n - 2)\n    end\n  end\nend","task_id":"HumanEval/55","sample_id":0}
{"completion":"\n    count = 0\n\n    for bracket <- String.graphemes(brackets) do\n      cond do\n        bracket == \"<\" -> count = count + 1\n        bracket == \">\" and count > 0 -> count = count - 1\n        true -> return false\n      end\n\n      if count < 0, do: return false\n    end\n\n    if(count == 0), do: true, else: false \nend  \nend","task_id":"HumanEval/56","sample_id":0}
{"completion":"    case l do\n      [_ | _] -> \n        increasing = Enum.chunk_every(l, 2, 1, :discard)\n                        |> Enum.all?(fn [a, b] -> a <= b end)\n        decreasing = Enum.chunk_every(l, 2, 1, :discard)\n                        |> Enum.all?(fn [a, b] -> a >= b end)\n        increasing or decreasing\n      [] ->\n        true # An empty list is considered monotonic\n    end\n  end\nend","task_id":"HumanEval/57","sample_id":0}
{"completion":"    l1\n    |> Enum.filter(&Enum.member?(l2, &1))\n    |> Enum.uniq()\n    |> Enum.sort()\n  end\nend","task_id":"HumanEval/58","sample_id":0}
{"completion":"    defp is_prime(2), do: true\n    defp is_prime(n) when n > 2 do\n      for i <- 2..:math.sqrt(n) |> round, rem(n, i) == 0, do: return false\n      true\n    end\n\n    largest = Enum.reduce_while(2..div(n, 2), 0, fn x, acc ->\n      if rem(n, x) == 0 and is_prime(x), do: {:halt, x}, else: {:cont, acc}\n    end)\n\n    largest\n  end\nend","task_id":"HumanEval/59","sample_id":0}
{"completion":"    Enum.sum(1..n)\n  end\nend","task_id":"HumanEval/60","sample_id":0}
{"completion":"    count = Enum.reduce(brackets, 0, fn\n      ?(, acc -> acc + 1\n      ?), acc when acc > 0 -> acc - 1\n      _, _ -> :error\n    end)\n\n    count == 0 and not String.contains?(brackets, \":error\")\n  end\nend","task_id":"HumanEval/61","sample_id":0}
{"completion":"    Enum.with_index(xs)\n    |> Enum.map(fn {coeff, index} -> coeff * index end)\n    |> tl()\n  end\nend","task_id":"HumanEval/62","sample_id":0}
{"completion":"    if n == 0 do\n      0\n    elif n == 1 do\n      0\n    elif n == 2 do\n      1\n    else \n      fibfib(n - 1) + fibfib(n - 2) + fibfib(n -3)\n    end  \n  end\n\nend","task_id":"HumanEval/63","sample_id":0}
{"completion":"    s\n    |> String.downcase()\n    |> String.to_charlist()\n    |> Enum.filter(&(&1 in 'aeiou' or (&1 == 'y' and &1 == Enum.at(s, -1))))\n    |> length()\n  end\nend","task_id":"HumanEval/64","sample_id":0}
{"completion":"    num_str = Integer.to_string(x)\n    len = String.length(num_str)\n\n    if shift >= len do\n      String.reverse(num_str)\n    else\n      {left, right} = String.split_at(num_str, len - shift)\n      right <> left\n    end\n  end\nend","task_id":"HumanEval/65","sample_id":0}
{"completion":"    s\n    |> String.to_charlist()\n    |> Enum.filter(&(&1 in ?A..?Z))\n    |> Enum.sum()\n  end\nend","task_id":"HumanEval/66","sample_id":0}
{"completion":"    [apples, oranges] = \n      s\n      |> String.split(~r/\\D+/)\n      |> Enum.filter(&(&1 != \"\"))\n      |> Enum.map(&String.to_integer/1)\n\n    n - apples - oranges\n  end\nend","task_id":"HumanEval/67","sample_id":0}
{"completion":"    even_values_with_indices = Enum.with_index(arr)\n                                  |> Enum.filter(fn {value, _index} -> rem(value, 2) == 0 end)\n\n    case even_values_with_indices do\n      [] -> []\n      _ ->\n        {smallest_even_value, smallest_index} =\n          Enum.min_by(even_values_with_indices, fn {value, index} -> {value, index} end)\n\n        [smallest_even_value, smallest_index]\n    end\n  end\nend","task_id":"HumanEval/68","sample_id":0}
{"completion":"    lst\n    |> Enum.frequencies()\n    |> Enum.filter(fn {k, v} -> k <= v end)\n    |> Enum.map(fn {k, _v} -> k end)\n    |> Enum.max_by(&(&1), fn -> -1 end)\n  end\nend","task_id":"HumanEval/69","sample_id":0}
{"completion":"    lst\n    |> Enum.sort()\n    |> strange_sort([])\n  end\n\n  defp strange_sort([], acc), do: Enum.reverse(acc)\n  defp strange_sort([min | rest], acc) when length(rest) > 0 do\n    max = List.last(rest)\n    rest = List.delete_at(rest, length(rest) - 1)\n    strange_sort(rest, [min, max | acc])\n  end\n  defp strange_sort([last], acc), do: [last | acc]\nend","task_id":"HumanEval/70","sample_id":0}
{"completion":"    if a + b > c && a + c > b && b + c > a do\n      s = (a + b + c) / 2\n      area = :math.sqrt(s * (s - a) * (s - b) * (s - c))\n      Float.round(area, 2)\n    else\n      -1\n    end\n  end\nend","task_id":"HumanEval/71","sample_id":0}
{"completion":"    is_balanced = q == Enum.reverse(q)\n    sum_of_elements = Enum.sum(q)\n\n    is_balanced and sum_of_elements <= w\n  end\nend","task_id":"HumanEval/72","sample_id":0}
{"completion":"    len = length(arr)\n    changes = 0\n\n    for i <- 0..(div(len, 2) - 1) do\n      if Enum.at(arr, i) != Enum.at(arr, len - i - 1), do: changes = changes + 1\n    end\n\n    changes\n  end\nend","task_id":"HumanEval/73","sample_id":0}
{"completion":"    length1 = Enum.reduce(lst1, 0, fn x, acc -> acc + String.length(x) end)\n    length2 = Enum.reduce(lst2, 0, fn x, acc -> acc + String.length(x) end)\n\n    if length1 <= length2 do\n      lst1\n    else\n      lst2\n    end\n  end\n\nend","task_id":"HumanEval/74","sample_id":0}
{"completion":"    defp is_prime(1), do: false\n    defp is_prime(n) when n <= 0, do: false\n    defp is_prime(n), do: Enum.none?(2..div(n, 2), &(rem(n, &1) == 0))\n\n    primes = Enum.filter(2..99, &is_prime/1)\n    \n    for x <- primes do\n      for y <- primes do\n        for z <- primes do\n          if x * y * z == a, do: return true \n        end  \n      end  \n    end\n    \n    false \n  end\n\nend","task_id":"HumanEval/75","sample_id":0}
{"completion":"    if n <= 0, do: false, else: is_power(x, n)\n  end\n\n  defp is_power(1, _), do: true\n  defp is_power(x, n) when x < n, do: false\n  defp is_power(x, n) do\n    rem = rem(x,n)\n    if rem == 0 do \n      is_power(div(x,n),n)\n    else \n      false\n    end  \n  end\nend","task_id":"HumanEval/76","sample_id":0}
{"completion":"    root = :math.cbrt(a)\n    round_root = round(root)\n    round_root * round_root * round_root == a\n  end\nend","task_id":"HumanEval/77","sample_id":0}
{"completion":"    num\n    |> String.graphemes()\n    |> Enum.filter(&(&1 in [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]))\n    |> length()\n  end\nend","task_id":"HumanEval/78","sample_id":0}
{"completion":"    \"db\" <> Integer.to_string(decimal, 2) <> \"db\"\n  end\nend","task_id":"HumanEval/79","sample_id":0}
{"completion":"    if String.length(s) < 3 do\n      false\n    else\n      s\n      |> String.graphemes()\n      |> Enum.chunk_every(3, 1, :discard)\n      |> Enum.all?(&(Enum.uniq(&1) == &1))\n    end\n  end\nend","task_id":"HumanEval/80","sample_id":0}
{"completion":"    grades\n    |> Enum.map(fn grade ->\n      cond do\n        grade == 4.0 -> 'A+'\n        grade > 3.7 -> 'A'\n        grade > 3.3 -> 'A-'\n        grade > 3.0 -> 'B+'\n        grade > 2.7 -> 'B'\n        grade > 2.3 -> 'B-'\n        grade > 2.0 -> 'C+'\n        grade > 1.7 -> 'C'\n        grade > 1.3 -> 'C-'\n        grade > 1.0 -> 'D+'\n        grade > 0.7 -> 'D' \n        true       -> if(grade == nil, do: nil, else: \"E\")\n      end\n    end)\nend\n\nend","task_id":"HumanEval/81","sample_id":0}
{"completion":"    defp is_prime(1), do: false\n    defp is_prime(2), do: true\n    defp is_prime(n) when n > 2 do\n      for i <- 2..div(n, 2), rem(n, i) == 0, do: return false\n      true\n    end\n\n    string |> String.length() |> is_prime()\n  end\nend","task_id":"HumanEval/82","sample_id":0}
{"completion":"    if n < 1 do\n      0\n    else\n      count_start_with_1 = 9 * :math.pow(10, n - 2)\n      count_end_with_1 = :math.pow(10, n - 1)\n      round(count_start_with_1 + count_end_with_1 - (n > 1 && true || false && true))\n    end\n  end\n\nend","task_id":"HumanEval/83","sample_id":0}
{"completion":"    sum_of_digits = Enum.reduce(Integer.digits(N), 0, fn x, acc -> x + acc end)\n    Integer.to_string(sum_of_digits, 2)\n  end\nend","task_id":"HumanEval/84","sample_id":0}
{"completion":"    Enum.with_index(lst)\n    |> Enum.filter(fn {val, index} -> rem(index, 2) == 1 and rem(val, 2) == 0 end)\n    |> Enum.map(fn {val, _index} -> val end)\n    |> Enum.sum()\n  end\nend","task_id":"HumanEval/85","sample_id":0}
{"completion":"    s\n    |> String.split(\" \")\n    |> Enum.map(&String.graphemes(&1) |> Enum.sort() |> Enum.join())\n    |> Enum.join(\" \")\n  end\nend","task_id":"HumanEval/86","sample_id":0}
{"completion":"    lst\n    |> Enum.with_index()\n    |> Enum.flat_map(fn {row, row_idx} ->\n      Enum.with_index(row)\n      |> Enum.filter(fn {val, _col_idx} -> val == x end)\n      |> Enum.map(fn {_val, col_idx} -> {row_idx, col_idx} end)\n    end)\n    |> Enum.sort_by(&{&1|>elem(0), -elem(1)})\n  end\nend","task_id":"HumanEval/87","sample_id":0}
{"completion":"    array_copy = Enum.sort(array, &(&1 <= &2))\n    sum = List.first(array_copy) + List.last(array_copy)\n\n    if Integer.is_odd(sum) do\n      array_copy\n    else\n      Enum.reverse(array_copy)\n    end\n  end\nend","task_id":"HumanEval/88","sample_id":0}
{"completion":"    s\n    |> String.to_charlist()\n    |> Enum.map(&rotate_char/1)\n    |> List.to_string()\n  end\n\n  defp rotate_char(char) when char in ?a..?z do\n    rotate(char, ?a, ?z)\n  end\n\n  defp rotate_char(char) when char in ?A..?Z do\n    rotate(char, ?A, ?Z)\n  end\n\n  defp rotate_char(char), do: char\n\n  defp rotate(char, base, max) do\n    offset = (char - base + (2 * 2)) % (max - base + 1)\n    base + offset\n  end\n  \nend","task_id":"HumanEval/89","sample_id":0}
{"completion":"    case Enum.uniq(lst) |> Enum.sort() do\n      [_first, second | _rest] -> second\n      _ -> nil\n    end\n  end\nend","task_id":"HumanEval/90","sample_id":0}
{"completion":"    S\n    |> String.split(~r/[.?!]/)\n    |> Enum.map(&String.trim/1)\n    |> Enum.filter(fn sentence -> String.starts_with?(sentence, \"I \") end)\n    |> length()\n  end\nend","task_id":"HumanEval/91","sample_id":0}
{"completion":"    if is_integer(x) and is_integer(y) and is_integer(z) do\n      x == y + z or y == x + z or z == x + y\n    else\n      false\n    end\n  end\nend","task_id":"HumanEval/92","sample_id":0}
{"completion":"    message\n    |> String.to_charlist()\n    |> Enum.map(&swap_case_and_vowels/1)\n    |> List.to_string()\n  end\n\n  defp swap_case_and_vowels(char) when char in 'aeiou' do\n    shift_vowel(char, 2)\n  end\n\n  defp swap_case_and_vowels(char) when char in 'AEIOU' do\n    shift_vowel(char, -2)\n  end\n\n  defp swap_case_and_vowels(char) do\n    if char in ?a..?z or char in ?A..?Z do\n      toggle_case(char)\n    else\n      char\n    end \n  end\n\n  defp toggle_case(char) when char >= ?a and char <= ?z, do: char - (?a - ?A)\n  \n  defp toggle_case(char), do: char + (?a - ?A)\n\n  \ndefp shift_vowel(vowel, shift) when vowel + shift > ?z,\ndo: (vowel + shift) -26\n  \ndefp shift_vowel(vowel, _shift =0), \ndo: vowel\n  \ndefp shift_vowel(vowel, _shift =","task_id":"HumanEval/93","sample_id":0}
{"completion":"    lst\n    |> Enum.filter(&is_prime/1)\n    |> Enum.max()\n    |> Integer.to_string()\n    |> String.graphemes()\n    |> Enum.map(&String.to_integer/1)\n    |> Enum.sum()\n  end\n\n  defp is_prime(2), do: true\n  defp is_prime(n) when n < 2 or rem(n, 2) == 0, do: false\n  defp is_prime(n) do\n    max_divisor = :math.sqrt(n) |> floor() |> trunc()\n\n    for divisor <- 3..max_divisor, step: 2, into: true do\n      if rem(n, divisor) == 0, do: false, else: true end \n      # If a single divisor evenly divides n without remainder,\n      # then it's not prime and we return false.\n      # Otherwise continue checking the next divisors.\n      # If no divisors are found that evenly divide n,\n      # then the loop completes and returns true (n is prime).\n      \n      # The 'into' option ensures that if any iteration returns 'false',\n      # the loop will immediately stop and return 'false'.\n      \n     end \n     && true  ","task_id":"HumanEval/94","sample_id":0}
{"completion":"    if map_size(dict) == 0 do\n      false\n    else\n      keys = Map.keys(dict)\n      all_lower = Enum.all?(keys, &is_binary(&1) andalso String.downcase(&1) == &1)\n      all_upper = Enum.all?(keys, &is_binary(&1) andalso String.upcase(&1) == &1)\n      \n      all_lower or all_upper\n    end\n  end\nend","task_id":"HumanEval/95","sample_id":0}
{"completion":"    Enum.filter(2..n-1, &is_prime/1)\n  end\n\n  defp is_prime(2), do: true\n  defp is_prime(n) when n < 2, do: false\n  defp is_prime(n) do\n    Enum.none?(2..:math.sqrt(n), &(rem(n, &1) == 0))\n  end\nend","task_id":"HumanEval/96","sample_id":0}
{"completion":"    (rem(a, 10)) * (rem(b, 10))\n  end\nend","task_id":"HumanEval/97","sample_id":0}
{"completion":"    String.to_charlist(s)\n    |> Enum.with_index()\n    |> Enum.filter(fn {char, index} -> rem(index, 2) == 0 end)\n    |> Enum.count(fn {char, _index} -> char in 'AEIOU' end)\n  end\nend","task_id":"HumanEval/98","sample_id":0}
{"completion":"    float_value = Float.parse(value) |> elem(0)\n    integer_part = trunc(float_value)\n    fractional_part = float_value - integer_part\n\n    if fractional_part > 0.5 do\n      integer_part + 1\n    else if fractional_part < -0.5 do\n      integer_part - 1\n    else if fractional_part == 0.5 and float_value > 0 do\n      integer_part + 1\n    else if fractional_part == -0.5 and float_value < 0 do \n      integer_part - 1 \n    else \n      integer_part \n    end  \nend\n\nend","task_id":"HumanEval/99","sample_id":0}
{"completion":"    Enum.map(0..(n-1), fn i -> n + 2 * i end)\n  end\nend","task_id":"HumanEval/100","sample_id":0}
{"completion":"    s\n    |> String.replace(\",\", \" \")\n    |> String.split()\n  end\nend","task_id":"HumanEval/101","sample_id":0}
{"completion":"    if x > y do\n      -1\n    else\n      max_y = if rem(y, 2) == 0, do: y, else: y - 1\n      if max_y < x do\n        -1\n      else \n        max_y \n      end  \n    end  \n  end\n\nend","task_id":"HumanEval/102","sample_id":0}
{"completion":"    if n > m do\n      -1\n    else\n      average = Enum.sum(n..m) / Enum.count(n..m)\n      rounded_average = Float.round(average, 0) |> trunc()\n      \"0b\" <> Integer.to_string(rounded_average, 2)\n    end\n  end\nend","task_id":"HumanEval/103","sample_id":0}
{"completion":"    x\n    |> Enum.filter(fn num -> \n      Integer.to_string(num)\n      |> String.contains?(~r/[24680]/)\n      |> Kernel.not()\n    end)\n    |> Enum.sort()\n  end\nend","task_id":"HumanEval/104","sample_id":0}
{"completion":"    arr\n    |> Enum.filter(&(&1 in 1..9))\n    |> Enum.sort()\n    |> Enum.reverse()\n    |> Enum.map(fn\n      1 -> \"One\"\n      2 -> \"Two\"\n      3 -> \"Three\"\n      4 -> \"Four\"\n      5 -> \"Five\"\n      6 -> \"Six\"\n      7 -> \"Seven\"\n      8 -> \"Eight\"\n      9 -> \"Nine\"\n    end)\nend","task_id":"HumanEval/105","sample_id":0}
{"completion":"    Enum.map(1..n, fn i ->\n      if rem(i, 2) == 0 do\n        Enum.reduce(1..i, 1, &*/2)\n      else\n        Enum.sum(1..i)\n      end\n    end)\n  end\nend","task_id":"HumanEval/106","sample_id":0}
{"completion":"    even = Enum.filter(1..n, fn x -> Integer.to_string(x) == String.reverse(Integer.to_string(x)) && rem(x, 2) == 0 end) |> length()\n    odd = Enum.filter(1..n, fn x -> Integer.to_string(x) == String.reverse(Integer.to_string(x)) && rem(x, 2) != 0 end) |> length()\n    {even, odd}\n  end\nend","task_id":"HumanEval/107","sample_id":0}
{"completion":"    arr\n    |> Enum.filter(fn x -> \n      x |> Integer.digits() |> Enum.sum() > 0\n    end)\n    |> length()\n  end\nend","task_id":"HumanEval/108","sample_id":0}
{"completion":"    if Enum.empty?(arr), do: true, else: check_shifts(arr)\n  end\n\n  defp check_shifts(arr) do\n    sorted = Enum.sort(arr)\n    Enum.any?(0..(length(arr) - 1), fn shift ->\n      Enum.at(sorted, -shift..-1) ++ Enum.at(sorted, 0..(length(sorted)-shift-1)) == arr\n    end)\n  end\nend","task_id":"HumanEval/109","sample_id":0}
{"completion":"    even_count_lst1 = Enum.count(lst1, &Integer.is_even/1)\n    odd_count_lst2 = Enum.count(lst2, &Integer.is_odd/1)\n\n    if even_count_lst1 + odd_count_lst2 >= Enum.count(lst1) do\n      \"YES\"\n    else\n      \"NO\"\n    end\n  end\nend","task_id":"HumanEval/110","sample_id":0}
{"completion":"    test\n    |> String.split()\n    |> Enum.frequencies()\n    |> Enum.reduce(%{}, fn {k, v}, acc ->\n      max_value = if Map.values(acc) == [], do: 0, else: Enum.max(Map.values(acc))\n      cond do\n        v > max_value -> %{k => v}\n        v == max_value -> Map.put(acc, k, v)\n        true -> acc\n      end\n    end)\n  end\nend","task_id":"HumanEval/111","sample_id":0}
{"completion":"    filtered_string = String.replace(s, ~r/[#{c}]/, \"\")\n    is_palindrome = filtered_string == String.reverse(filtered_string)\n    {filtered_string, is_palindrome}\n  end\nend","task_id":"HumanEval/112","sample_id":0}
{"completion":"    lst\n    |> Enum.map(&String.graphemes(&1))\n    |> Enum.map(&Enum.filter(&1, fn x -> rem(String.to_integer(x), 2) == 1 end))\n    |> Enum.map(fn x ->\n      count = length(x)\n      \"the number of odd elements #{count}n the str#{count}ng #{count} of the #{count}nput.\"\n    end)\n  end\nend","task_id":"HumanEval/113","sample_id":0}
{"completion":"    Enum.reduce(nums, {Enum.at(nums, 0), Enum.at(nums, 0)}, fn x, {min_sum, current_sum} ->\n      new_current_sum = min(x, current_sum + x)\n      new_min_sum = min(new_current_sum, min_sum)\n      {new_min_sum, new_current_sum}\n    end) |> elem(0)\n  end\nend","task_id":"HumanEval/114","sample_id":0}
{"completion":"    grid\n    |> Enum.map(&Enum.count(&1, 1))\n    |> Enum.sum()\n    |> Kernel./(capacity)\n    |> Float.ceil()\n    |> trunc()\n  end\nend","task_id":"HumanEval/115","sample_id":0}
{"completion":"    arr\n    |> Enum.sort_by(&{Bitwise.popcount(&1), &1})\n  end\nend","task_id":"HumanEval/116","sample_id":0}
{"completion":"    s\n    |> String.split()\n    |> Enum.filter(fn word ->\n      word\n      |> String.downcase()\n      |> String.graphemes()\n      |> Enum.count(fn char -> \n        char in ~w(b c d f g h j k l m n p q r s t v w x y z) \n      end) == n\n    end)\n  end\nend","task_id":"HumanEval/117","sample_id":0}
{"completion":"    vowels = \"aeiouAEIOU\"\n    chars = String.graphemes(word)\n    \n    chars\n    |> Enum.reverse()\n    |> Enum.chunk_while([], fn \n      x, acc when acc == [] and not String.contains?(vowels, x) -> {:cont, [x]}\n      x, [h | _] = acc when not String.contains?(vowels, h) and String.contains?(vowels, x) -> {:cont, [x | acc]}\n      _, acc -> {:halt, Enum.reverse(acc)}\n    end)\n    |> List.first()\n    |> (fn \n      [_consonant1, vowel_candidate | _] -> vowel_candidate\n      _other_cases -> \"\"\n    end).()\n  end\nend","task_id":"HumanEval/118","sample_id":0}
{"completion":"    # Check if the first string can be a valid start\n    defp can_start?(str) do\n      Enum.reduce(str, 0, fn \n        ?(, acc -> acc + 1\n        ?), acc when acc > 0 -> acc - 1\n        _, _ -> :error \n      end) != :error\n    end\n\n    case lst do\n      [a, b] ->\n        if can_start?(a <> b) or can_start?(b <> a), do: \"Yes\", else: \"No\"\n      _ ->\n        \"No\"\n    end  \n  end\n\nend","task_id":"HumanEval/119","sample_id":0}
{"completion":"    arr\n    |> Enum.sort(&>/2)\n    |> Enum.take(k)\n  end\nend","task_id":"HumanEval/120","sample_id":0}
{"completion":"    Enum.with_index(lst)\n    |> Enum.filter(fn {val, index} -> rem(index, 2) == 1 and rem(val, 2) != 0 end)\n    |> Enum.map(fn {val, _index} -> val end)\n    |> Enum.sum()\n  end\nend","task_id":"HumanEval/121","sample_id":0}
{"completion":"    arr\n    |> Enum.take(k)\n    |> Enum.filter(fn x -> x >= -99 and x <= 99 end)\n    |> Enum.sum()\n  end\nend","task_id":"HumanEval/122","sample_id":0}
{"completion":"    Enum.filter(collatz_sequence(n), &odd?/1) |> Enum.sort()\n  end\n\n  defp collatz_sequence(1), do: [1]\n  defp collatz_sequence(n) when n > 1 do\n    [n | collatz_sequence(next_collatz(n))]\n  end\n\n  defp next_collatz(n) when rem(n, 2) == 0, do: div(n, 2)\n  defp next_collatz(n), do: n * 3 + 1\n\n  defp odd?(n), do: rem(n,2) !=0\nend","task_id":"HumanEval/123","sample_id":0}
{"completion":"    case Regex.match?(~r/^\\d{2}-\\d{2}-\\d{4}$/, date) do\n      true ->\n        [month, day, year] = String.split(date, \"-\") |> Enum.map(&String.to_integer/3)\n        case month do\n          1 -> day in 1..31\n          2 -> if Date.leap_year?(year), do: day in 1..29, else: day in 1..28\n          3 -> day in 1..31\n          4 -> day in 1..30\n          5 -> day in 1..31\n          6 -> day in 1..30\n          7 -> day in 1..31 \n          _ ->\n            case month do \n              _ when month ==8 or month ==10 or month ==12->day<=31 and not(day<0)\n              _ when (month==9 or month==11)->day<=30 and not(day<0)\n              true->false  \n            end  \n        end\n\n      false ->\n        false # The format is incorrect.\n    end\n    \nend\n\nend\n","task_id":"HumanEval/124","sample_id":0}
{"completion":"    case String.contains?(txt, \" \") do\n      true -> String.split(txt)\n      false ->\n        case String.contains?(txt, \",\") do\n          true -> String.split(txt, \",\")\n          false -> \n            txt\n            |> String.codepoints()\n            |> Enum.filter(&String.match?(&1, ~r/^[a-z]$/))\n            |> Enum.map(&(&1.ord - ?a.ord))\n            |> Enum.filter(&(rem(&1, 2) == 1))\n            |> length()\n        end\n    end\n  end\n\nend","task_id":"HumanEval/125","sample_id":0}
{"completion":"    lst\n    |> Enum.chunk_by(& &1)\n    |> Enum.all?(& (length(&1) <= 2))\n    && Enum.sort(lst) == lst\n  end\nend","task_id":"HumanEval/126","sample_id":0}
{"completion":"    # Find the maximum of the two starts and the minimum of the two ends\n    max_start = max(elem(interval1, 0), elem(interval2, 0))\n    min_end = min(elem(interval1, 1), elem(interval2, 1))\n\n    # Calculate intersection length\n    intersection_length = min_end - max_start + 1\n\n    # Check if there is no intersection or if length is less than or equal to one (not prime)\n    if intersection_length <= 0 do\n      \"NO\"\n    else\n      case is_prime(intersection_length) do\n        true -> \"YES\"\n        false -> \"NO\"\n      end\n    end \n  end\n\n  defp is_prime(n) when n <= 1 do \n     false \n   end \n\n   defp is_prime(n) do \n     Enum.none?(2..:math.sqrt(n), fn x -> rem(n, x) == 0 end)\n   end \n\nend","task_id":"HumanEval/127","sample_id":0}
{"completion":"    if Enum.empty?(arr), do: nil, else: Enum.reduce(arr, 1, fn x, acc -> acc * sign(x) end) * Enum.map(arr, &abs/1) |> Enum.sum()\n  end\n\n  defp sign(x) when x > 0, do: 1\n  defp sign(x) when x < 0, do: -1\n  defp sign(0), do: 0\nend","task_id":"HumanEval/128","sample_id":0}
{"completion":"    defp neighbors({x, y}, n) do\n      for dx <- [-1, 0, 1], dy <- [-1, 0, 1],\n          abs(dx) + abs(dy) == 1,\n          new_x = x + dx,\n          new_y = y + dy,\n          new_x in 0..(n - 1),\n          new_y in 0..(n - 1),\n        do: {new_x, new_y}\n    end\n\n    defp dfs(_grid, _k, path_length, _path_value_list), \n      when path_length >= _k do\n      {:ok}\n    end\n\n    defp dfs(grid, k,path_length,[{x,y}|path_value_list]) do\n      Enum.reduce(neighbors({x,y}, length(grid)), [Enum.at(Enum.at(grid,x),y)|path_value_list], fn {nx ,ny}, acc ->\n        case dfs(grid,k,path_length+1,[{nx ,ny}|[{x,y}|path_value_list]]) do\n            {:ok} -> acc\n            list -> list \n        end  \n      end)\n      \n    end\n    \n     min_path = fn grid,k->\n       min_paths =","task_id":"HumanEval/129","sample_id":0}
{"completion":"    defp tribonacci(0, acc), do: Enum.reverse(acc)\n    defp tribonacci(n, acc) when n > 0 and rem(n, 2) == 0 do\n      tribonacci(n - 1, [1 + div(n, 2) | acc])\n    end\n    defp tribonacci(n, acc) do\n      [a | _] = acc\n      [b | _] = tl(acc)\n      c = hd(tl(tl(acc)))\n      \n      next_val = a + b + c\n\n      # Calculate the value for tri(n+1) since it's needed for the odd case.\n      next_next_val = if rem(next_val + n + 1, 2) == 0,\n        do: (next_val + n + 1),\n        else: (next_val * (n+3))\n\n      # Append both tri(n-1)+tri(n-2)+tri(n+1), and tri(next_n).\n      tribonacci(\n        n - 1,\n        [next_next_val] ++ [next_val] ++ acc \n       )\n    end\n\n    def tri(0), do: [3]\n    def tri(1),","task_id":"HumanEval/130","sample_id":0}
{"completion":"    n\n    |> Integer.digits()\n    |> Enum.filter(&rem(&1, 2) != 0)\n    |> Enum.reduce(1, &*/2)\n    |> (fn \n          [] -> 0\n          product -> product\n        end).()\n  end\nend","task_id":"HumanEval/131","sample_id":0}
{"completion":"    stack = []\n    for char <- String.graphemes(string) do\n      cond do\n        char == \"[\" ->\n          stack = [char | stack]\n        char == \"]\" ->\n          if stack != [] and hd(stack) == \"[\" do\n            # Pop the opening bracket from the stack.\n            tl(stack)\n          else\n            # Invalid sequence, return false immediately.\n            return false\n          end\n      end\n    end\n\n    # If there are any remaining opening brackets, check for nested ones.\n    Enum.any?(stack, fn _ -> Enum.count(stack, &(&1 == \"[\")) > 1 end)\n  end\n\nend","task_id":"HumanEval/132","sample_id":0}
{"completion":"    lst\n    |> Enum.map(&Float.ceil/1)\n    |> Enum.map(&(&1 * &1))\n    |> Enum.sum()\n  end\nend","task_id":"HumanEval/133","sample_id":0}
{"completion":"    if String.length(txt) == 0 || String.at(txt, -1) in [\" \", nil] do\n      false\n    else\n      Regex.match?(~r/[a-zA-Z]\\z/, txt)\n    end\n  end\nend","task_id":"HumanEval/134","sample_id":0}
{"completion":"  for i <- 1..(length(arr) - 1), arr[i] < arr[i - 1], do: i\n  |> Enum.at(-1, -1)\nend\nend","task_id":"HumanEval/135","sample_id":0}
{"completion":"    negatives = Enum.filter(lst, &(&1 < 0))\n    positives = Enum.filter(lst, &(&1 > 0))\n\n    largest_negative = if Enum.empty?(negatives), do: nil, else: Enum.max(negatives)\n    smallest_positive = if Enum.empty?(positives), do: nil, else: Enum.min(positives)\n\n    {largest_negative, smallest_positive}\n  end\nend","task_id":"HumanEval/136","sample_id":0}
{"completion":"    parse_float = fn value ->\n      case Float.parse(String.replace(value, \",\", \".\")) do\n        {number, \"\"} -> number\n        :error -> nil\n      end\n    end\n\n    parsed_a = if is_number(a), do: a, else: parse_float.(a)\n    parsed_b = if is_number(b), do: b, else: parse_float.(b)\n\n    cond do\n      parsed_a == nil or parsed_b == nil -> raise ArgumentError, \"Invalid input\"\n      parsed_a > parsed_b -> a\n      parsed_a < parsed_b -> b\n      true -> nil  # values are equal; return None (nil in Elixir)\n    end \n  end\n\nend  ","task_id":"HumanEval/137","sample_id":0}
{"completion":"    if n < 8 or rem(n, 2) != 0 do\n      false\n    else\n      true\n    end\n  end\nend","task_id":"HumanEval/138","sample_id":0}
{"completion":"    Enum.reduce(1..n, 1, fn x, acc -> acc * :math.pow(x, x) |> trunc() end)\n  end\nend","task_id":"HumanEval/139","sample_id":0}
{"completion":"    text\n    |> String.replace(~r/\\s{3,}/, \"-\")\n    |> String.replace(\" \", \"_\")\n  end\nend","task_id":"HumanEval/140","sample_id":0}
{"completion":"    digits_count = String.length(String.replace(file_name, ~r/[^\\d]/, \"\"))\n    parts = String.split(file_name, \".\")\n    \n    if digits_count <= 3 and length(parts) == 2 do\n      [name_part, extension_part] = parts\n      valid_extensions = [\"txt\", \"exe\", \"dll\"]\n      \n      if name_part =~ ~r/^[a-zA-Z]/ and extension_part in valid_extensions do\n        'Yes'\n      else\n        'No'\n      end\n    else\n      'No'\n    end \n  end \nend ","task_id":"HumanEval/141","sample_id":0}
{"completion":"    Enum.with_index(lst)\n    |> Enum.map(fn {x, idx} ->\n      cond do\n        rem(idx + 1, 12) == 0 -> :math.pow(x, 6)\n        rem(idx + 1, 4) == 0 -> :math.pow(x, 3)\n        rem(idx + 1, 3) == 0 -> x * x\n        true -> x\n      end\n    end)\n    |> Enum.sum()\n    |> round()\nend\n\nend","task_id":"HumanEval/142","sample_id":0}
{"completion":"    defp prime?(1), do: false\n    defp prime?(2), do: true\n    defp prime?(n) when n > 2 do\n      for i <- 2..(n |> :math.sqrt() |> trunc()), do: rem(n, i) == 0 |> not()\n      |> Enum.all?()\n    end\n\n    sentence\n    |> String.split(\" \")\n    |> Enum.filter(&prime?(&1 |> String.length()))\n    |> Enum.join(\" \")\n  end\nend","task_id":"HumanEval/143","sample_id":0}
{"completion":"    {x_num, x_den} = parse_fraction(x)\n    {n_num, n_den} = parse_fraction(n)\n\n    result_num = x_num * n_num\n    result_den = x_den * n_den\n\n    rem(result_num, result_den) == 0\n  end\n\n  defp parse_fraction(fraction) do\n    [num_str, den_str] = String.split(fraction, \"/\")\n    {String.to_integer(num_str), String.to_integer(den_str)}\n  end\nend","task_id":"HumanEval/144","sample_id":0}
{"completion":"    nums\n    |> Enum.with_index()\n    |> Enum.sort_by(fn {num, _index} -> digit_sum(num) end)\n    |> Enum.map(fn {num, _index} -> num end)\n  end\n\n  defp digit_sum(num) do\n    to_string(num)\n    |> String.graphemes()\n    |> Enum.map(&String.to_integer/1)\n    |> Enum.filter(&(&1 >= 0))\n    |> Enum.sum()\n  end\nend","task_id":"HumanEval/145","sample_id":0}
{"completion":"    nums\n    |> Enum.filter(fn x -> \n      x > 10 and \n      Integer.to_string(x) |> String.first() in [\"1\", \"3\", \"5\", \"7\", \"9\"] and\n      Integer.to_string(x) |> String.last() in [\"1\", \"3\", \"5\", \"7\", \"9\"]\n    end)\n    |> length()\n  end\nend","task_id":"HumanEval/146","sample_id":0}
{"completion":"    a = for i <- 1..n, do: i * i - i + 1\n    triples = for i <- 1..(n-2), j <- (i+1)..(n-1), k <- (j+1)..n, \n              do: {a[i], a[j], a[k]}, \n              into: [], \n              if (a[i] + a[j] + a[k]) rem 3 == 0\n    length(triples)\n  end\nend","task_id":"HumanEval/147","sample_id":0}
{"completion":"    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    case {Enum.find_index(planets, &(&1 == planet1)), Enum.find_index(planets, &(&1 == planet2))} do\n      {nil, _} -> {}\n      {_, nil} -> {}\n      {index1, index2} when index1 < index2 ->\n        Enum.slice(planets, index1 + 1..index2 - 1) |> List.to_tuple()\n      {index1, index2} ->\n        Enum.slice(planets, index2 + 1..index1 - 1) |> List.to_tuple()\n    end\n  end\n\nend","task_id":"HumanEval/148","sample_id":0}
{"completion":"    lst\n    |> Enum.filter(fn s -> rem(String.length(s), 2) == 0 end)\n    |> Enum.sort_by(&String.length/1)\n    |> Enum.sort_by(&(&1))\n  end\nend","task_id":"HumanEval/149","sample_id":0}
{"completion":"    if is_prime(n) do\n      x\n    else\n      y\n    end\n  end\n\n  defp is_prime(1), do: false\n  defp is_prime(2), do: true\n  \n  defp is_prime(n) when n > 2 do \n    Enum.none?(2..div(n,2), fn i -> rem(n, i) == 0 end)\n  end  \nend","task_id":"HumanEval/150","sample_id":0}
{"completion":"    lst\n    |> Enum.filter(fn x -> is_integer(x) and x > 0 and rem(x, 2) == 1 end)\n    |> Enum.map(&(&1 * &1))\n    |> Enum.sum()\n  end\nend","task_id":"HumanEval/151","sample_id":0}
{"completion":"    Enum.zip(game, guess)\n    |> Enum.map(fn {g, gu} -> abs(g - gu) end)\n  end\nend","task_id":"HumanEval/152","sample_id":0}
{"completion":"    extensions\n    |> Enum.map(&{&1, strength(&1)})\n    |> Enum.max_by(fn {_, strength} -> strength end)\n    |> elem(0)\n    |> (&(\"#{class_name}.#{&1}\")).()\n  end\n\n  defp strength(extension) do\n    extension\n    |> String.graphemes()\n    |> Enum.reduce(0, fn char, acc ->\n      if char in 'A'..'Z', do: acc + 1, else: acc - 1\n    end)\n  end\nend","task_id":"HumanEval/153","sample_id":0}
{"completion":"    # Check if b is a substring of a\n    if String.contains?(a, b) do\n      true\n    else\n      # Generate all rotations of b and check each one to see if it's a substring of a\n      1..String.length(b)\n      |> Enum.any?(fn i ->\n        rotated_b = String.slice(b, i..-1) <> String.slice(b, 0..i-1)\n        String.contains?(a, rotated_b)\n      end)\n    end\n  end\n\nend","task_id":"HumanEval/154","sample_id":0}
{"completion":"    num\n    |> Integer.to_string()\n    |> String.graphemes()\n    |> Enum.map(&String.to_integer/1)\n    |> Enum.reduce({0, 0}, fn x, {even, odd} ->\n      if rem(x, 2) == 0 do\n        {even + 1, odd}\n      else\n        {even, odd + 1}\n      end\n    end)\n  end\nend","task_id":"HumanEval/155","sample_id":0}
{"completion":"    roman_numerals = [\n      {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"},\n      {100, \"c\"},  {90,  \"xc\"},  {50,  \"l\"},  {40,  \"xl\"},\n      {10 , \"x\"},   {9 ,   \"ix\"},{5 ,   \"v\" },{4 ,   'iv'},\n      {1 ,   'i'}\n    ]\n\n    Enum.reduce(roman_numerals, {\"\", number}, fn \n        ({value,_}, acc) when value > acc -> acc\n        ({value,char}, acc) ->\n          times = div(acc,value)\n          remainder = rem(acc,value)\n          {[char | elem(acc)], remainder + times * value}\n    end) |> elem(0)\nend\n\nend","task_id":"HumanEval/156","sample_id":0}
{"completion":"    sides = Enum.sort([a, b, c])\n    Enum.at(sides, 0) * Enum.at(sides, 0) + Enum.at(sides, 1) * Enum.at(sides, 1) == Enum.at(sides, 2) * Enum.at(sides, 2)\n  end\nend","task_id":"HumanEval/157","sample_id":0}
{"completion":"    words\n    |> Enum.map(&{length(MapSet.new(String.graphemes(&1))), &1})\n    |> Enum.max_by(fn {count, _word} -> count end)\n    |> elem(1)\n  end\nend","task_id":"HumanEval/158","sample_id":0}
{"completion":"    if remaining >= need do\n      [number + need, remaining - need]\n    else\n      [number + remaining, 0]\n    end\n  end\nend","task_id":"HumanEval/159","sample_id":0}
{"completion":"    # Convert operators to Elixir operator tokens and interleave with operands\n    expression = Enum.zip(operand, operator ++ [nil])\n                    |> Enum.map(fn {num, op} -> \n                        case op do\n                          \"+\" -> \"#{num} +\"\n                          \"-\" -> \"#{num} -\"\n                          \"*\" -> \"#{num} *\"\n                          \"//\" -> \"#{num} div\"\n                          \"**\" -> \"#{num} |> :math.pow(\"\n                          nil  -> if String.ends_with?(to_string(num), \")\"), do: num <> \")\", else: Integer.to_string(num)\n                        end\n                      end)\n                    |> Enum.join(\" \")\n\n    # Evaluate the expression using Elixir's eval capabilities in a safe context.\n    Code.eval_string(expression, [], __ENV__)\n    |> elem(0)\n  end\n\nend","task_id":"HumanEval/160","sample_id":0}
{"completion":"    if String.contains?(s, ~r/[a-zA-Z]/) do\n      s |> String.graphemes() |> Enum.map(&swap_case/1) |> Enum.join()\n    else\n      String.reverse(s)\n    end\n  end\n\n  defp swap_case(char) when char in 'a'..'z' or char in 'A'..'Z', do: String.swap_case(char)\n  defp swap_case(char), do: char\nend","task_id":"HumanEval/161","sample_id":0}
{"completion":"    if text == \"\" do\n      nil\n    else\n      :crypto.hash(:md5, text) |> Base.encode16(case: :lower)\n    end\n  end\nend","task_id":"HumanEval/162","sample_id":0}
{"completion":"    min = Enum.min([a, b])\n    max = Enum.max([a, b])\n\n    min..max\n    |> Enum.filter(&Integer.is_even/1)\n  end\nend","task_id":"HumanEval/163","sample_id":0}