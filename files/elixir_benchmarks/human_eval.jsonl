{"id":"HumanEval/0","description":null,"tests":"defmodule HumanEval0Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval0.has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert HumanEval0.has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert HumanEval0.has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert HumanEval0.has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert HumanEval0.has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert HumanEval0.has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert HumanEval0.has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval0 do\n\n  @doc ~s\"\"\"\n   Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  False\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  True\n  \n  \"\"\"\n  def has_close_elements(numbers, threshold) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/1","description":null,"tests":"defmodule HumanEval1Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval1.separate_paren_groups(\"(()()) ((())) () ((())()())\") == [\n        \"(()())\", \"((()))\", \"()\", \"((())()())\"\n    ]\n    assert HumanEval1.separate_paren_groups(\"() (()) ((())) (((())))\") == [\n        \"()\", \"(())\", \"((()))\", \"(((())))\"\n    ]\n    assert HumanEval1.separate_paren_groups(\"(()(())((())))\") == [\n        \"(()(())((())))\"\n    ]\n    assert HumanEval1.separate_paren_groups(\"( ) (( )) (( )( ))\") == [\"()\", \"(())\", \"(()())\"]\n\n  end\nend\n","code_context_before":"defmodule HumanEval1 do\n\n  @doc ~s\"\"\"\n   Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  \n  \"\"\"\n  def separate_paren_groups(paren_string) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/2","description":null,"tests":"defmodule HumanEval2Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval2.truncate_number(3.5) == 0.5\n    assert abs(HumanEval2.truncate_number(1.33) - 0.33) < 1.0e-6\n    assert abs(HumanEval2.truncate_number(123.456) - 0.456) < 1.0e-6\n\n  end\nend\n","code_context_before":"defmodule HumanEval2 do\n\n  @doc ~s\"\"\"\n   Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  0.5\n  \n  \"\"\"\n  def truncate_number(number) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/3","description":null,"tests":"defmodule HumanEval3Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval3.below_zero([]) == False\n    assert HumanEval3.below_zero([1, 2, -3, 1, 2, -3]) == False\n    assert HumanEval3.below_zero([1, 2, -4, 5, 6]) == True\n    assert HumanEval3.below_zero([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert HumanEval3.below_zero([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert HumanEval3.below_zero([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\n  end\nend\n","code_context_before":"defmodule HumanEval3 do\n\n  @doc ~s\"\"\"\n   You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return True. Otherwise it should return False.\n  >>> below_zero([1, 2, 3])\n  False\n  >>> below_zero([1, 2, -4, 5])\n  True\n  \n  \"\"\"\n  def below_zero(operations) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/4","description":null,"tests":"defmodule HumanEval4Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert abs(HumanEval4.mean_absolute_deviation([1.0, 2.0, 3.0]) - 2.0/3.0) < 1.0e-6\n    assert abs(HumanEval4.mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1.0e-6\n    assert abs(HumanEval4.mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1.0e-6\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval4 do\n\n  @doc ~s\"\"\"\n   For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  \n  \"\"\"\n  def mean_absolute_deviation(numbers) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/5","description":null,"tests":"defmodule HumanEval5Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval5.intersperse([], 7) == []\n    assert HumanEval5.intersperse([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert HumanEval5.intersperse([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n\n  end\nend\n","code_context_before":"defmodule HumanEval5 do\n\n  @doc ~s\"\"\"\n   Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  \n  \"\"\"\n  def intersperse(numbers, delimeter) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/6","description":null,"tests":"defmodule HumanEval6Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval6.parse_nested_parens(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3]\n    assert HumanEval6.parse_nested_parens(\"() (()) ((())) (((())))\") == [1, 2, 3, 4]\n    assert HumanEval6.parse_nested_parens(\"(()(())((())))\") == [4]\n\n  end\nend\n","code_context_before":"defmodule HumanEval6 do\n\n  @doc ~s\"\"\"\n   Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  \n  \"\"\"\n  def parse_nested_parens(paren_string) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/7","description":null,"tests":"defmodule HumanEval7Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval7.filter_by_substring([], \"john\") == []\n    assert HumanEval7.filter_by_substring([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n    assert HumanEval7.filter_by_substring([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n    assert HumanEval7.filter_by_substring([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]\n\n  end\nend\n","code_context_before":"defmodule HumanEval7 do\n\n  @doc ~s\"\"\"\n   Filter an input list of strings only for ones that contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  \n  \"\"\"\n  def filter_by_substring(strings, substring) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/8","description":null,"tests":"defmodule HumanEval8Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval8.sum_product([]) == {0, 1}\n    assert HumanEval8.sum_product([1, 1, 1]) == {3, 1}\n    assert HumanEval8.sum_product([100, 0]) == {100, 0}\n    assert HumanEval8.sum_product([3, 5, 7]) == {3 + 5 + 7, 3 * 5 * 7}\n    assert HumanEval8.sum_product([10]) == {10, 10}\n\n  end\nend\n","code_context_before":"defmodule HumanEval8 do\n\n  @doc ~s\"\"\"\n   For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([])\n  (0, 1)\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  \n  \"\"\"\n  def sum_product(numbers) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/9","description":null,"tests":"defmodule HumanEval9Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval9.rolling_max([]) == []\n    assert HumanEval9.rolling_max([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert HumanEval9.rolling_max([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert HumanEval9.rolling_max([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\n  end\nend\n","code_context_before":"defmodule HumanEval9 do\n\n  @doc ~s\"\"\"\n   From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  \n  \"\"\"\n  def rolling_max(numbers) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/10","description":null,"tests":"defmodule HumanEval10Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval10.make_palindrome(\"\") == \"\"\n    assert HumanEval10.make_palindrome(\"x\") == \"x\"\n    assert HumanEval10.make_palindrome(\"xyz\") == \"xyzyx\"\n    assert HumanEval10.make_palindrome(\"xyx\") == \"xyx\"\n    assert HumanEval10.make_palindrome(\"jerry\") == \"jerryrrej\"\n\n  end\nend\n","code_context_before":"defmodule HumanEval10 do\n  @doc \"\"\"\n  Test if given string is a palindrome\n  \"\"\"\n  def is_palindrome(string), do: String.reverse(string) == string\n\n  @doc ~s\"\"\"\n   Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> make_palindrome('')\n  ''\n  >>> make_palindrome('cat')\n  'catac'\n  >>> make_palindrome('cata')\n  'catac'\n  \n  \"\"\"\n  def make_palindrome(string) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/11","description":null,"tests":"defmodule HumanEval11Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval11.string_xor(\"111000\", \"101010\") == \"010010\"\n    assert HumanEval11.string_xor(\"1\", \"1\") == \"0\"\n    assert HumanEval11.string_xor(\"0101\", \"0000\") == \"0101\"\n\n  end\nend\n","code_context_before":"defmodule HumanEval11 do\n\n  @doc ~s\"\"\"\n   Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  \n  \"\"\"\n  def string_xor(a, b) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/12","description":null,"tests":"defmodule HumanEval12Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval12.longest([]) == None\n    assert HumanEval12.longest([\"x\", \"y\", \"z\"]) == \"x\"\n    assert HumanEval12.longest([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n\n  end\nend\n","code_context_before":"defmodule HumanEval12 do\n\n  @doc ~s\"\"\"\n   Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return None in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  \n  \"\"\"\n  def longest(strings) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/13","description":null,"tests":"defmodule HumanEval13Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval13.greatest_common_divisor(3, 7) == 1\n    assert HumanEval13.greatest_common_divisor(10, 15) == 5\n    assert HumanEval13.greatest_common_divisor(49, 14) == 7\n    assert HumanEval13.greatest_common_divisor(144, 60) == 12\n\n  end\nend\n","code_context_before":"defmodule HumanEval13 do\n\n  @doc ~s\"\"\"\n   Return a greatest common divisor of two integers a and b\n  >>> greatest_common_divisor(3, 5)\n  1\n  >>> greatest_common_divisor(25, 15)\n  5\n  \n  \"\"\"\n  def greatest_common_divisor(a, b) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/14","description":null,"tests":"defmodule HumanEval14Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval14.all_prefixes(\"\") == []\n    assert HumanEval14.all_prefixes(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n    assert HumanEval14.all_prefixes(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n\n  end\nend\n","code_context_before":"defmodule HumanEval14 do\n\n  @doc ~s\"\"\"\n   Return list of all prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  \n  \"\"\"\n  def all_prefixes(string) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/15","description":null,"tests":"defmodule HumanEval15Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval15.string_sequence(0) == \"0\"\n    assert HumanEval15.string_sequence(3) == \"0 1 2 3\"\n    assert HumanEval15.string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n\n  end\nend\n","code_context_before":"defmodule HumanEval15 do\n\n  @doc ~s\"\"\"\n   Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  \n  \"\"\"\n  def string_sequence(n) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/16","description":null,"tests":"defmodule HumanEval16Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval16.count_distinct_characters(\"\") == 0\n    assert HumanEval16.count_distinct_characters(\"abcde\") == 5\n    assert HumanEval16.count_distinct_characters(\"abcde\" + \"cade\" + \"CADE\") == 5\n    assert HumanEval16.count_distinct_characters(\"aaaaAAAAaaaa\") == 1\n    assert HumanEval16.count_distinct_characters(\"Jerry jERRY JeRRRY\") == 5\n\n  end\nend\n","code_context_before":"defmodule HumanEval16 do\n\n  @doc ~s\"\"\"\n   Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  \n  \"\"\"\n  def count_distinct_characters(string) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/17","description":null,"tests":"defmodule HumanEval17Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval17.parse_music(\"\") == []\n    assert HumanEval17.parse_music(\"o o o o\") == [4, 4, 4, 4]\n    assert HumanEval17.parse_music(\".| .| .| .|\") == [1, 1, 1, 1]\n    assert HumanEval17.parse_music(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert HumanEval17.parse_music(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n\n  end\nend\n","code_context_before":"defmodule HumanEval17 do\n\n  @doc ~s\"\"\"\n   Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  \n  \"\"\"\n  def parse_music(music_string) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/18","description":null,"tests":"defmodule HumanEval18Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval18.how_many_times(\"\", \"x\") == 0\n    assert HumanEval18.how_many_times(\"xyxyxyx\", \"x\") == 4\n    assert HumanEval18.how_many_times(\"cacacacac\", \"cac\") == 4\n    assert HumanEval18.how_many_times(\"john doe\", \"john\") == 1\n\n  end\nend\n","code_context_before":"defmodule HumanEval18 do\n\n  @doc ~s\"\"\"\n   Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  \n  \"\"\"\n  def how_many_times(string, substring) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/19","description":null,"tests":"defmodule HumanEval19Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval19.sort_numbers(\"\") == \"\"\n    assert HumanEval19.sort_numbers(\"three\") == \"three\"\n    assert HumanEval19.sort_numbers(\"three five nine\") == \"three five nine\"\n    assert HumanEval19.sort_numbers(\"five zero four seven nine eight\") == \"zero four five seven eight nine\"\n    assert HumanEval19.sort_numbers(\"six five four three two one zero\") == \"zero one two three four five six\"\n\n  end\nend\n","code_context_before":"defmodule HumanEval19 do\n\n  @doc ~s\"\"\"\n   Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  \n  \"\"\"\n  def sort_numbers(numbers) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/20","description":null,"tests":"defmodule HumanEval20Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval20.find_closest_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == {3.9, 4.0}\n    assert HumanEval20.find_closest_elements([1.0, 2.0, 5.9, 4.0, 5.0]) == {5.0, 5.9}\n    assert HumanEval20.find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == {2.0, 2.2}\n    assert HumanEval20.find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == {2.0, 2.0}\n    assert HumanEval20.find_closest_elements([1.1, 2.2, 3.1, 4.1, 5.1]) == {2.2, 3.1}\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval20 do\n\n  @doc ~s\"\"\"\n   From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  \n  \"\"\"\n  def find_closest_elements(numbers) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/21","description":null,"tests":"defmodule HumanEval21Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval21.rescale_to_unit([2.0, 49.9]) == [0.0, 1.0]\n    assert HumanEval21.rescale_to_unit([100.0, 49.9]) == [1.0, 0.0]\n    assert HumanEval21.rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert HumanEval21.rescale_to_unit([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert HumanEval21.rescale_to_unit([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\n  end\nend\n","code_context_before":"defmodule HumanEval21 do\n\n  @doc ~s\"\"\"\n   Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  \n  \"\"\"\n  def rescale_to_unit(numbers) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/22","description":null,"tests":"defmodule HumanEval22Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval22.filter_integers([]) == []\n    assert HumanEval22.filter_integers([4, {}, [], 23.2, 9, \"adasd\"]) == [4, 9]\n    assert HumanEval22.filter_integers([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n\n  end\nend\n","code_context_before":"defmodule HumanEval22 do\n\n  @doc ~s\"\"\"\n   Filter given list of any python values only for integers\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  \n  \"\"\"\n  def filter_integers(values) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/23","description":null,"tests":"defmodule HumanEval23Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval23.strlen(\"\") == 0\n    assert HumanEval23.strlen(\"x\") == 1\n    assert HumanEval23.strlen(\"asdasnakj\") == 9\n\n  end\nend\n","code_context_before":"defmodule HumanEval23 do\n\n  @doc ~s\"\"\"\n   Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  \n  \"\"\"\n  def strlen(string) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/24","description":null,"tests":"defmodule HumanEval24Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval24.largest_divisor(3) == 1\n    assert HumanEval24.largest_divisor(7) == 1\n    assert HumanEval24.largest_divisor(10) == 5\n    assert HumanEval24.largest_divisor(100) == 50\n    assert HumanEval24.largest_divisor(49) == 7\n\n  end\nend\n","code_context_before":"defmodule HumanEval24 do\n\n  @doc ~s\"\"\"\n   For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  \n  \"\"\"\n  def largest_divisor(n) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/25","description":null,"tests":"defmodule HumanEval25Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval25.factorize(2) == [2]\n    assert HumanEval25.factorize(4) == [2, 2]\n    assert HumanEval25.factorize(8) == [2, 2, 2]\n    assert HumanEval25.factorize(3 * 19) == [3, 19]\n    assert HumanEval25.factorize(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert HumanEval25.factorize(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert HumanEval25.factorize(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert HumanEval25.factorize(3 * 2 * 3) == [2, 3, 3]\n\n  end\nend\n","code_context_before":"defmodule HumanEval25 do\n\n  @doc ~s\"\"\"\n   Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  \n  \"\"\"\n  def factorize(n) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/26","description":null,"tests":"defmodule HumanEval26Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval26.remove_duplicates([]) == []\n    assert HumanEval26.remove_duplicates([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert HumanEval26.remove_duplicates([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n\n  end\nend\n","code_context_before":"defmodule HumanEval26 do\n\n  @doc ~s\"\"\"\n   From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  \n  \"\"\"\n  def remove_duplicates(numbers) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/27","description":null,"tests":"defmodule HumanEval27Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval27.flip_case(\"\") == \"\"\n    assert HumanEval27.flip_case(\"Hello!\") == \"hELLO!\"\n    assert HumanEval27.flip_case(\"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\n\n  end\nend\n","code_context_before":"defmodule HumanEval27 do\n\n  @doc ~s\"\"\"\n   For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flip_case('Hello')\n  'hELLO'\n  \n  \"\"\"\n  def flip_case(string) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/28","description":null,"tests":"defmodule HumanEval28Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval28.concatenate([]) == \"\"\n    assert HumanEval28.concatenate([\"x\", \"y\", \"z\"]) == \"xyz\"\n    assert HumanEval28.concatenate([\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\"\n\n  end\nend\n","code_context_before":"defmodule HumanEval28 do\n\n  @doc ~s\"\"\"\n   Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  \n  \"\"\"\n  def concatenate(strings) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/29","description":null,"tests":"defmodule HumanEval29Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval29.filter_by_prefix([], \"john\") == []\n    assert HumanEval29.filter_by_prefix([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n\n  end\nend\n","code_context_before":"defmodule HumanEval29 do\n\n  @doc ~s\"\"\"\n   Filter an input list of strings only for ones that start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  \n  \"\"\"\n  def filter_by_prefix(strings, prefix) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/30","description":null,"tests":"defmodule HumanEval30Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval30.get_positive([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert HumanEval30.get_positive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert HumanEval30.get_positive([-1, -2]) == []\n    assert HumanEval30.get_positive([]) == []\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval30 do\n\n  @doc ~s\"\"\"\n  Return only positive numbers in the list.\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  \n  \"\"\"\n  def get_positive(l) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/31","description":null,"tests":"defmodule HumanEval31Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval31.is_prime(6) == False\n    assert HumanEval31.is_prime(101) == True\n    assert HumanEval31.is_prime(11) == True\n    assert HumanEval31.is_prime(13441) == True\n    assert HumanEval31.is_prime(61) == True\n    assert HumanEval31.is_prime(4) == False\n    assert HumanEval31.is_prime(1) == False\n    assert HumanEval31.is_prime(5) == True\n    assert HumanEval31.is_prime(11) == True\n    assert HumanEval31.is_prime(17) == True\n    assert HumanEval31.is_prime(5 * 17) == False\n    assert HumanEval31.is_prime(11 * 7) == False\n    assert HumanEval31.is_prime(13441 * 19) == False\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval31 do\n\n  @doc ~s\"\"\"\n  Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  False\n  >>> is_prime(101)\n  True\n  >>> is_prime(11)\n  True\n  >>> is_prime(13441)\n  True\n  >>> is_prime(61)\n  True\n  >>> is_prime(4)\n  False\n  >>> is_prime(1)\n  False\n  \n  \"\"\"\n  def is_prime(n) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/32","description":null,"tests":"defmodule HumanEval32Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    :rand.seed(:exsplus, {42, 42, 42})\nfor _ <- 1..100 do\n  coeffs = for _ <- 1..(2 * Enum.random(1..4)), do: Enum.random(-10..10)\n  solution = HumanEval32.find_zero(coeffs)\n  assert abs(HumanEval32.poly(coeffs, solution) < 1.0e-4)\nend\n\n  end\nend\n","code_context_before":"defmodule HumanEval32 do\n  @doc \"\"\"\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  \"\"\"\n  def poly(xs, x) do\n    xs\n    |> Enum.with_index()\n    |> Enum.reduce(0, fn {coeff, i}, acc -> acc + coeff * :math.pow(x, i) end)\n  end\n\n  @doc ~s\"\"\"\n   xs are coefficients of a polynomial.\n  find_zero find x such that poly(x) = 0.\n  find_zero returns only only zero point, even if there are many.\n  Moreover, find_zero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  \n  \"\"\"\n  def find_zero(xs) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/33","description":null,"tests":"defmodule HumanEval33Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    assert HumanEval33.sort_third([1, 2, 3]) == HumanEval33.sort_third([1, 2, 3])\nassert HumanEval33.sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == HumanEval33.sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\nassert HumanEval33.sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == HumanEval33.sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])\nassert HumanEval33.sort_third([5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5]\nassert HumanEval33.sort_third([5, 8, 3, 4, 6, 9, 2]) == [2, 8, 3, 4, 6, 9, 5]\nassert HumanEval33.sort_third([5, 6, 9, 4, 8, 3, 2]) == [2, 6, 9, 4, 8, 3, 5]\nassert HumanEval33.sort_third([5, 6, 3, 4, 8, 9, 2, 1]) == [2, 6, 3, 4, 8, 9, 5, 1]\n\n  end\nend\n","code_context_before":"defmodule HumanEval33 do\n\n  @doc ~s\"\"\"\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_third([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  \n  \"\"\"\n  def sort_third(l) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/34","description":null,"tests":"defmodule HumanEval34Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval34.unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval34 do\n\n  @doc ~s\"\"\"\n  Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  \n  \"\"\"\n  def unique(l) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/35","description":null,"tests":"defmodule HumanEval35Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval35.max_element([1, 2, 3]) == 3\n    assert HumanEval35.max_element([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n\n  end\nend\n","code_context_before":"defmodule HumanEval35 do\n\n  @doc ~s\"\"\"\n  Return maximum element in the list.\n  >>> max_element([1, 2, 3])\n  3\n  >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  \n  \"\"\"\n  def max_element(l) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/36","description":null,"tests":"defmodule HumanEval36Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval36.fizz_buzz(50) == 0\n    assert HumanEval36.fizz_buzz(78) == 2\n    assert HumanEval36.fizz_buzz(79) == 3\n    assert HumanEval36.fizz_buzz(100) == 3\n    assert HumanEval36.fizz_buzz(200) == 6\n    assert HumanEval36.fizz_buzz(4000) == 192\n    assert HumanEval36.fizz_buzz(10000) == 639\n    assert HumanEval36.fizz_buzz(100000) == 8026\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval36 do\n\n  @doc ~s\"\"\"\n  Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  \n  \"\"\"\n  def fizz_buzz(n) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/37","description":null,"tests":"defmodule HumanEval37Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert (HumanEval37.sort_even([1, 2, 3])) == ([1, 2, 3])\n    assert (HumanEval37.sort_even([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == ([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert (HumanEval37.sort_even([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == ([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval37 do\n\n  @doc ~s\"\"\"\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  \n  \"\"\"\n  def sort_even(l) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/38","description":null,"tests":"defmodule HumanEval38Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    :rand.seed(:exsplus, {42, 42, 42})\nfor _ <- 1..100 do\n  str = List.duplicate(0, Enum.random(10..20)) \n    |> Enum.map(fn _ -> Enum.random(?a..?z) end) \n    |> to_string()\n  assert HumanEval38.encode_cyclic(HumanEval38.encode_cyclic(str)) == str\nend\n\n  end\nend\n","code_context_before":"defmodule HumanEval38 do\n  @doc \"\"\"\n  returns encoded string by cycling groups of three characters.\n  \"\"\"\n  def encode_cyclic(s) do\n    s\n    |> String.graphemes()\n    |> Enum.chunk_every(3)\n    |> Enum.map(fn\n      [a, b, c] -> [b, c, a]\n      [a, b] -> [a, b]\n      [a] -> [a]\n    end)\n    |> List.flatten()\n    |> Enum.join()\n  end\n\n  @doc ~s\"\"\"\n  \n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  \n  \"\"\"\n  def decode_cyclic(s) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/39","description":null,"tests":"defmodule HumanEval39Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval39.prime_fib(1) == 2\n    assert HumanEval39.prime_fib(2) == 3\n    assert HumanEval39.prime_fib(3) == 5\n    assert HumanEval39.prime_fib(4) == 13\n    assert HumanEval39.prime_fib(5) == 89\n    assert HumanEval39.prime_fib(6) == 233\n    assert HumanEval39.prime_fib(7) == 1597\n    assert HumanEval39.prime_fib(8) == 28657\n    assert HumanEval39.prime_fib(9) == 514229\n    assert HumanEval39.prime_fib(10) == 433494437\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval39 do\n\n  @doc ~s\"\"\"\n  \n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  \n  \"\"\"\n  def prime_fib(n) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/40","description":null,"tests":"defmodule HumanEval40Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval40.triples_sum_to_zero([1, 3, 5, 0]) == False\n    assert HumanEval40.triples_sum_to_zero([1, 3, 5, -1]) == False\n    assert HumanEval40.triples_sum_to_zero([1, 3, -2, 1]) == True\n    assert HumanEval40.triples_sum_to_zero([1, 2, 3, 7]) == False\n    assert HumanEval40.triples_sum_to_zero([1, 2, 5, 7]) == False\n    assert HumanEval40.triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == True\n    assert HumanEval40.triples_sum_to_zero([1]) == False\n    assert HumanEval40.triples_sum_to_zero([1, 3, 5, -100]) == False\n    assert HumanEval40.triples_sum_to_zero([100, 3, 5, -100]) == False\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval40 do\n\n  @doc ~s\"\"\"\n  \n  triples_sum_to_zero takes a list of integers as an input.\n  it returns True if there are three distinct elements in the list that\n  sum to zero, and False otherwise.\n\n  >>> triples_sum_to_zero([1, 3, 5, 0])\n  False\n  >>> triples_sum_to_zero([1, 3, -2, 1])\n  True\n  >>> triples_sum_to_zero([1, 2, 3, 7])\n  False\n  >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  True\n  >>> triples_sum_to_zero([1])\n  False\n  \n  \"\"\"\n  def triples_sum_to_zero(l) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/41","description":null,"tests":"defmodule HumanEval41Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval41.car_race_collision(2) == 4\n    assert HumanEval41.car_race_collision(3) == 9\n    assert HumanEval41.car_race_collision(4) == 16\n    assert HumanEval41.car_race_collision(8) == 64\n    assert HumanEval41.car_race_collision(10) == 100\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval41 do\n\n  @doc ~s\"\"\"\n  \n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  \n  \"\"\"\n  def car_race_collision(n) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/42","description":null,"tests":"defmodule HumanEval42Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval42.incr_list([]) == []\n    assert HumanEval42.incr_list([3, 2, 1]) == [4, 3, 2]\n    assert HumanEval42.incr_list([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval42 do\n\n  @doc ~s\"\"\"\n  Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  \n  \"\"\"\n  def incr_list(l) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/43","description":null,"tests":"defmodule HumanEval43Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval43.pairs_sum_to_zero([1, 3, 5, 0]) == False\n    assert HumanEval43.pairs_sum_to_zero([1, 3, -2, 1]) == False\n    assert HumanEval43.pairs_sum_to_zero([1, 2, 3, 7]) == False\n    assert HumanEval43.pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True\n    assert HumanEval43.pairs_sum_to_zero([1]) == False\n\n    assert HumanEval43.pairs_sum_to_zero([-3, 9, -1, 3, 2, 30]) == True\n    assert HumanEval43.pairs_sum_to_zero([-3, 9, -1, 3, 2, 31]) == True\n    assert HumanEval43.pairs_sum_to_zero([-3, 9, -1, 4, 2, 30]) == False\n    assert HumanEval43.pairs_sum_to_zero([-3, 9, -1, 4, 2, 31]) == False\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval43 do\n\n  @doc ~s\"\"\"\n  \n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns True if there are two distinct elements in the list that\n  sum to zero, and False otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  False\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  False\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  False\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  True\n  >>> pairs_sum_to_zero([1])\n  False\n  \n  \"\"\"\n  def pairs_sum_to_zero(l) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/44","description":null,"tests":"defmodule HumanEval44Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    assert HumanEval44.change_base(8, 3) == \"22\"\nassert HumanEval44.change_base(9, 3) == \"100\"\nassert HumanEval44.change_base(234, 2) == \"11101010\"\nassert HumanEval44.change_base(16, 2) == \"10000\"\nassert HumanEval44.change_base(8, 2) == \"1000\"\nassert HumanEval44.change_base(7, 2) == \"111\"\nfor x <- 2..8 do\n  assert HumanEval44.change_base(x, x + 1) == Integer.to_string(x)\nend\n\n  end\nend\n","code_context_before":"defmodule HumanEval44 do\n\n  @doc ~s\"\"\"\n  Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  \n  \"\"\"\n  def change_base(x, base) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/45","description":null,"tests":"defmodule HumanEval45Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval45.triangle_area(5, 3) == 7.5\n    assert HumanEval45.triangle_area(2, 2) == 2.0\n    assert HumanEval45.triangle_area(10, 8) == 40.0\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval45 do\n\n  @doc ~s\"\"\"\n  Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  \n  \"\"\"\n  def triangle_area(a, h) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/46","description":null,"tests":"defmodule HumanEval46Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval46.fib4(5) == 4\n    assert HumanEval46.fib4(8) == 28\n    assert HumanEval46.fib4(10) == 104\n    assert HumanEval46.fib4(12) == 386\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval46 do\n\n  @doc ~s\"\"\"\n  The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  \n  \"\"\"\n  def fib4(n) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/47","description":null,"tests":"defmodule HumanEval47Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval47.median([3, 1, 2, 4, 5]) == 3\n    assert HumanEval47.median([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert HumanEval47.median([5]) == 5\n    assert HumanEval47.median([6, 5]) == 5.5\n    assert HumanEval47.median([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n\n  end\nend\n","code_context_before":"defmodule HumanEval47 do\n\n  @doc ~s\"\"\"\n  Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  15.0\n  \n  \"\"\"\n  def median(l) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/48","description":null,"tests":"defmodule HumanEval48Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval48.is_palindrome(\"\") == True\n    assert HumanEval48.is_palindrome(\"aba\") == True\n    assert HumanEval48.is_palindrome(\"aaaaa\") == True\n    assert HumanEval48.is_palindrome(\"zbcd\") == False\n    assert HumanEval48.is_palindrome(\"xywyx\") == True\n    assert HumanEval48.is_palindrome(\"xywyz\") == False\n    assert HumanEval48.is_palindrome(\"xywzx\") == False\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval48 do\n\n  @doc ~s\"\"\"\n  \n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  True\n  >>> is_palindrome('aba')\n  True\n  >>> is_palindrome('aaaaa')\n  True\n  >>> is_palindrome('zbcd')\n  False\n  \n  \"\"\"\n  def is_palindrome(text) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/49","description":null,"tests":"defmodule HumanEval49Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval49.modp(3, 5) == 3\n    assert HumanEval49.modp(1101, 101) == 2\n    assert HumanEval49.modp(0, 101) == 1\n    assert HumanEval49.modp(3, 11) == 8\n    assert HumanEval49.modp(100, 101) == 1\n    assert HumanEval49.modp(30, 5) == 4\n    assert HumanEval49.modp(31, 5) == 3\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval49 do\n\n  @doc ~s\"\"\"\n  Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  \n  \"\"\"\n  def modp(n, p) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/50","description":null,"tests":"defmodule HumanEval50Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    :rand.seed(:exsplus, {42, 42, 42})\nfor _ <- 1..100 do\n  random_string = for _ <- 1..Enum.random(10..20), into: \"\", do: <<Enum.random(?a..?z)>>\n  assert HumanEval50.decode_shift(HumanEval50.encode_shift(random_string)) == random_string\nend\n\n  end\nend\n","code_context_before":"defmodule HumanEval50 do\n  @doc \"\"\"\n  returns encoded string by shifting every character by 5 in the alphabet.\n  \"\"\"\n  def encode_shift(s) do\n    s\n    |> String.to_charlist()\n    |> Enum.map(&((rem((&1 + 5 - ?a), 26)) + ?a))\n    |> to_string()\n  end\n\n  @doc ~s\"\"\"\n  \n  takes as input string encoded with encode_shift function. Returns decoded string.\n  \n  \"\"\"\n  def decode_shift(s) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/51","description":null,"tests":"defmodule HumanEval51Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval51.remove_vowels(\"\") == \"\"\n    assert HumanEval51.remove_vowels(\"abcdef\\nghijklm\") == \"bcdf\\nghjklm\"\n    assert HumanEval51.remove_vowels(\"fedcba\") == \"fdcb\"\n    assert HumanEval51.remove_vowels(\"eeeee\") == \"\"\n    assert HumanEval51.remove_vowels(\"acBAA\") == \"cB\"\n    assert HumanEval51.remove_vowels(\"EcBOO\") == \"cB\"\n    assert HumanEval51.remove_vowels(\"ybcd\") == \"ybcd\"\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval51 do\n\n  @doc ~s\"\"\"\n  \n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  \n  \"\"\"\n  def remove_vowels(text) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/52","description":null,"tests":"defmodule HumanEval52Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval52.below_threshold([1, 2, 4, 10], 100)\n    assert not HumanEval52.below_threshold([1, 20, 4, 10], 5)\n    assert HumanEval52.below_threshold([1, 20, 4, 10], 21)\n    assert HumanEval52.below_threshold([1, 20, 4, 10], 22)\n    assert HumanEval52.below_threshold([1, 8, 4, 10], 11)\n    assert not HumanEval52.below_threshold([1, 8, 4, 10], 10)\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval52 do\n\n  @doc ~s\"\"\"\n  Return True if all numbers in the list l are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  True\n  >>> below_threshold([1, 20, 4, 10], 5)\n  False\n  \n  \"\"\"\n  def below_threshold(l, t) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/53","description":null,"tests":"defmodule HumanEval53Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    assert HumanEval53.add(0, 1) == 1\nassert HumanEval53.add(1, 0) == 1\nassert HumanEval53.add(2, 3) == 5\nassert HumanEval53.add(5, 7) == 12\nassert HumanEval53.add(7, 5) == 12\n\n:rand.seed(:exsplus, {42, 42, 42})\nfor _ <- 1..100 do\n  {x, y} = {Enum.random(0, 1000), Enum.random(0, 1000)}\n  assert HumanEval53.add(x, y) == x + y\nend\n\n  end\nend\n","code_context_before":"defmodule HumanEval53 do\n\n  @doc ~s\"\"\"\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  \n  \"\"\"\n  def add(x, y) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/54","description":null,"tests":"defmodule HumanEval54Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval54.same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == True\n    assert HumanEval54.same_chars(\"abcd\", \"dddddddabc\") == True\n    assert HumanEval54.same_chars(\"dddddddabc\", \"abcd\") == True\n    assert HumanEval54.same_chars(\"eabcd\", \"dddddddabc\") == False\n    assert HumanEval54.same_chars(\"abcd\", \"dddddddabcf\") == False\n    assert HumanEval54.same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == False\n    assert HumanEval54.same_chars(\"aabb\", \"aaccc\") == False\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval54 do\n\n  @doc ~s\"\"\"\n  \n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  True\n  >>> same_chars('abcd', 'dddddddabc')\n  True\n  >>> same_chars('dddddddabc', 'abcd')\n  True\n  >>> same_chars('eabcd', 'dddddddabc')\n  False\n  >>> same_chars('abcd', 'dddddddabce')\n  False\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  False\n  \n  \"\"\"\n  def same_chars(s0, s1) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/55","description":null,"tests":"defmodule HumanEval55Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval55.fib(10) == 55\n    assert HumanEval55.fib(1) == 1\n    assert HumanEval55.fib(8) == 21\n    assert HumanEval55.fib(11) == 89\n    assert HumanEval55.fib(12) == 144\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval55 do\n\n  @doc ~s\"\"\"\n  Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  \n  \"\"\"\n  def fib(n) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/56","description":null,"tests":"defmodule HumanEval56Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval56.correct_bracketing(\"<>\")\n    assert HumanEval56.correct_bracketing(\"<<><>>\")\n    assert HumanEval56.correct_bracketing(\"<><><<><>><>\")\n    assert HumanEval56.correct_bracketing(\"<><><<<><><>><>><<><><<>>>\")\n    assert not HumanEval56.correct_bracketing(\"<<<><>>>>\")\n    assert not HumanEval56.correct_bracketing(\"><<>\")\n    assert not HumanEval56.correct_bracketing(\"<\")\n    assert not HumanEval56.correct_bracketing(\"<<<<\")\n    assert not HumanEval56.correct_bracketing(\">\")\n    assert not HumanEval56.correct_bracketing(\"<<>\")\n    assert not HumanEval56.correct_bracketing(\"<><><<><>><>><<>\")\n    assert not HumanEval56.correct_bracketing(\"<><><<><>><>>><>\")\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval56 do\n\n  @doc ~s\"\"\"\n   brackets is a string of \"<\" and \">\".\n  return True if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"<\")\n  False\n  >>> correct_bracketing(\"<>\")\n  True\n  >>> correct_bracketing(\"<<><>>\")\n  True\n  >>> correct_bracketing(\"><<>\")\n  False\n  \n  \"\"\"\n  def correct_bracketing(brackets) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/57","description":null,"tests":"defmodule HumanEval57Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval57.monotonic([1, 2, 4, 10]) == True\n    assert HumanEval57.monotonic([1, 2, 4, 20]) == True\n    assert HumanEval57.monotonic([1, 20, 4, 10]) == False\n    assert HumanEval57.monotonic([4, 1, 0, -10]) == True\n    assert HumanEval57.monotonic([4, 1, 1, 0]) == True\n    assert HumanEval57.monotonic([1, 2, 3, 2, 5, 60]) == False\n    assert HumanEval57.monotonic([1, 2, 3, 4, 5, 60]) == True\n    assert HumanEval57.monotonic([9, 9, 9, 9]) == True\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval57 do\n\n  @doc ~s\"\"\"\n  Return True is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  True\n  >>> monotonic([1, 20, 4, 10])\n  False\n  >>> monotonic([4, 1, 0, -10])\n  True\n  \n  \"\"\"\n  def monotonic(l) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/58","description":null,"tests":"defmodule HumanEval58Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval58.common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert HumanEval58.common([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert HumanEval58.common([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert HumanEval58.common([4, 3, 2, 8], []) == []\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval58 do\n\n  @doc ~s\"\"\"\n  Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  \n  \"\"\"\n  def common(l1, l2) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/59","description":null,"tests":"defmodule HumanEval59Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval59.largest_prime_factor(15) == 5\n    assert HumanEval59.largest_prime_factor(27) == 3\n    assert HumanEval59.largest_prime_factor(63) == 7\n    assert HumanEval59.largest_prime_factor(330) == 11\n    assert HumanEval59.largest_prime_factor(13195) == 29\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval59 do\n\n  @doc ~s\"\"\"\n  Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  \n  \"\"\"\n  def largest_prime_factor(n) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/60","description":null,"tests":"defmodule HumanEval60Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval60.sum_to_n(1) == 1\n    assert HumanEval60.sum_to_n(6) == 21\n    assert HumanEval60.sum_to_n(11) == 66\n    assert HumanEval60.sum_to_n(30) == 465\n    assert HumanEval60.sum_to_n(100) == 5050\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval60 do\n\n  @doc ~s\"\"\"\n  sum_to_n is a function that sums numbers from 1 to n.\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  \n  \"\"\"\n  def sum_to_n(n) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/61","description":null,"tests":"defmodule HumanEval61Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval61.correct_bracketing(\"()\")\n    assert HumanEval61.correct_bracketing(\"(()())\")\n    assert HumanEval61.correct_bracketing(\"()()(()())()\")\n    assert HumanEval61.correct_bracketing(\"()()((()()())())(()()(()))\")\n    assert not HumanEval61.correct_bracketing(\"((()())))\")\n    assert not HumanEval61.correct_bracketing(\")(()\")\n    assert not HumanEval61.correct_bracketing(\"(\")\n    assert not HumanEval61.correct_bracketing(\"((((\")\n    assert not HumanEval61.correct_bracketing(\")\")\n    assert not HumanEval61.correct_bracketing(\"(()\")\n    assert not HumanEval61.correct_bracketing(\"()()(()())())(()\")\n    assert not HumanEval61.correct_bracketing(\"()()(()())()))()\")\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval61 do\n\n  @doc ~s\"\"\"\n   brackets is a string of \"(\" and \")\".\n  return True if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"(\")\n  False\n  >>> correct_bracketing(\"()\")\n  True\n  >>> correct_bracketing(\"(()())\")\n  True\n  >>> correct_bracketing(\")(()\")\n  False\n  \n  \"\"\"\n  def correct_bracketing(brackets) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/62","description":null,"tests":"defmodule HumanEval62Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval62.derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert HumanEval62.derivative([1, 2, 3]) == [2, 6]\n    assert HumanEval62.derivative([3, 2, 1]) == [2, 2]\n    assert HumanEval62.derivative([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert HumanEval62.derivative([1]) == []\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval62 do\n\n  @doc ~s\"\"\"\n   xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  \n  \"\"\"\n  def derivative(xs) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/63","description":null,"tests":"defmodule HumanEval63Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval63.fibfib(2) == 1\n    assert HumanEval63.fibfib(1) == 0\n    assert HumanEval63.fibfib(5) == 4\n    assert HumanEval63.fibfib(8) == 24\n    assert HumanEval63.fibfib(10) == 81\n    assert HumanEval63.fibfib(12) == 274\n    assert HumanEval63.fibfib(14) == 927\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval63 do\n\n  @doc ~s\"\"\"\n  The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  \n  \"\"\"\n  def fibfib(n) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/64","description":null,"tests":"defmodule HumanEval64Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval64.vowels_count(\"abcde\") == 2\n    assert HumanEval64.vowels_count(\"Alone\") == 3\n    assert HumanEval64.vowels_count(\"key\") == 2\n    assert HumanEval64.vowels_count(\"bye\") == 1\n    assert HumanEval64.vowels_count(\"keY\") == 2\n    assert HumanEval64.vowels_count(\"bYe\") == 1\n    assert HumanEval64.vowels_count(\"ACEDY\") == 3\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval64 do\n\n  @doc ~s\"\"\"\n  Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  \n  \"\"\"\n  def vowels_count(s) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/65","description":null,"tests":"defmodule HumanEval65Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval65.circular_shift(100, 2) == \"001\"\n    assert HumanEval65.circular_shift(12, 2) == \"12\"\n    assert HumanEval65.circular_shift(97, 8) == \"79\"\n    assert HumanEval65.circular_shift(12, 1) == \"21\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval65.circular_shift(11, 101) == \"11\"\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval65 do\n\n  @doc ~s\"\"\"\n  Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circular_shift(12, 1)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  \n  \"\"\"\n  def circular_shift(x, shift) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/66","description":null,"tests":"defmodule HumanEval66Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert True\n    assert HumanEval66.digit_sum(\"\") == 0\n    assert HumanEval66.digit_sum(\"abAB\") == 131\n    assert HumanEval66.digit_sum(\"abcCd\") == 67\n    assert HumanEval66.digit_sum(\"helloE\") == 69\n    assert HumanEval66.digit_sum(\"woArBld\") == 131\n    assert HumanEval66.digit_sum(\"aAaaaXa\") == 153\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n    assert HumanEval66.digit_sum(\" How are yOu?\") == 151\n    assert HumanEval66.digit_sum(\"You arE Very Smart\") == 327\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval66 do\n\n  @doc ~s\"\"\"\n  Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  \n  \"\"\"\n  def digit_sum(s) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/67","description":null,"tests":"defmodule HumanEval67Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval67.fruit_distribution(\"5 apples and 6 oranges\",19) == 8\n    assert HumanEval67.fruit_distribution(\"5 apples and 6 oranges\",21) == 10\n    assert HumanEval67.fruit_distribution(\"0 apples and 1 oranges\",3) == 2\n    assert HumanEval67.fruit_distribution(\"1 apples and 0 oranges\",3) == 2\n    assert HumanEval67.fruit_distribution(\"2 apples and 3 oranges\",100) == 95\n    assert HumanEval67.fruit_distribution(\"2 apples and 3 oranges\",5) == 0\n    assert HumanEval67.fruit_distribution(\"1 apples and 100 oranges\",120) == 19\n\n  end\nend\n","code_context_before":"defmodule HumanEval67 do\n\n  @doc ~s\"\"\"\n  \n  In this task, you will be given a string that represents a number of apples and oranges \n  that are distributed in a basket of fruit this basket contains \n  apples, oranges, and mango fruits. Given the string that represents the total number of \n  the oranges and apples and an integer that represent the total number of the fruits \n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  \n  \"\"\"\n  def fruit_distribution(s,n) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/68","description":null,"tests":"defmodule HumanEval68Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert True\n    assert HumanEval68.pluck([4,2,3]) == [2, 1]\n    assert HumanEval68.pluck([1,2,3]) == [2, 1]\n    assert HumanEval68.pluck([]) == []\n    assert HumanEval68.pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n    assert HumanEval68.pluck([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert HumanEval68.pluck([5, 4, 8, 4 ,8]) == [4, 1]\n    assert HumanEval68.pluck([7, 6, 7, 1]) == [6, 1]\n    assert HumanEval68.pluck([7, 9, 7, 1]) == []\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval68 do\n\n  @doc ~s\"\"\"\n  \n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n  Example 3:\n      Input: []\n      Output: []\n  \n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  \n  \"\"\"\n  def pluck(arr) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/69","description":null,"tests":"defmodule HumanEval69Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # manually generated tests\n    assert HumanEval69.search([5, 5, 5, 5, 1]) == 1\n    assert HumanEval69.search([4, 1, 4, 1, 4, 4]) == 4\n    assert HumanEval69.search([3, 3]) == -1\n    assert HumanEval69.search([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert HumanEval69.search([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert HumanEval69.search([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert HumanEval69.search([3, 2, 8, 2]) == 2\n    assert HumanEval69.search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert HumanEval69.search([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert HumanEval69.search([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert HumanEval69.search([1, 9, 10, 1, 3]) == 1\n    assert HumanEval69.search([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert HumanEval69.search([1]) == 1\n    assert HumanEval69.search([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert HumanEval69.search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert HumanEval69.search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert HumanEval69.search([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert HumanEval69.search([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert HumanEval69.search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert HumanEval69.search([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert HumanEval69.search([10]) == -1\n    assert HumanEval69.search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert HumanEval69.search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert HumanEval69.search([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert HumanEval69.search([3, 10, 10, 9, 2]) == -1\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval69 do\n\n  @doc ~s\"\"\"\n  \n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n  zero, and has a frequency greater than or equal to the value of the integer itself. \n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1]) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n      search([5, 5, 4, 4, 4]) == -1\n  \n  \"\"\"\n  def search(lst) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/70","description":null,"tests":"defmodule HumanEval70Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval70.strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert HumanEval70.strange_sort_list([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert HumanEval70.strange_sort_list([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert HumanEval70.strange_sort_list([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert HumanEval70.strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert HumanEval70.strange_sort_list([]) == []\n    assert HumanEval70.strange_sort_list([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert HumanEval70.strange_sort_list([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert HumanEval70.strange_sort_list([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval70 do\n\n  @doc ~s\"\"\"\n  \n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strange_sort_list([]) == []\n  \n  \"\"\"\n  def strange_sort_list(lst) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/71","description":null,"tests":"defmodule HumanEval71Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval71.triangle_area(3, 4, 5) == 6.00\n    assert HumanEval71.triangle_area(1, 2, 10) == -1\n    assert HumanEval71.triangle_area(4, 8, 5) == 8.18\n    assert HumanEval71.triangle_area(2, 2, 2) == 1.73\n    assert HumanEval71.triangle_area(1, 2, 3) == -1\n    assert HumanEval71.triangle_area(10, 5, 7) == 16.25\n    assert HumanEval71.triangle_area(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval71.triangle_area(1, 1, 1) == 0.43\n    assert HumanEval71.triangle_area(2, 2, 10) == -1\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval71 do\n\n  @doc ~s\"\"\"\n  \n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater \n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  \n  \"\"\"\n  def triangle_area(a, b, c) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/72","description":null,"tests":"defmodule HumanEval72Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval72.will_it_fly([3, 2, 3], 9) == True\n    assert HumanEval72.will_it_fly([1, 2], 5) == False\n    assert HumanEval72.will_it_fly([3], 5) == True\n    assert HumanEval72.will_it_fly([3, 2, 3], 1) == False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval72.will_it_fly([1, 2, 3], 6) == False\n    assert HumanEval72.will_it_fly([5], 5) == True\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval72 do\n\n  @doc ~s\"\"\"\n  \n  Write a function that returns True if the object q will fly, and False otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ False \n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ False\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ True\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ True\n  # 3 is less than the maximum possible weight, and it's balanced.\n  \n  \"\"\"\n  def will_it_fly(q,w) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/73","description":null,"tests":"defmodule HumanEval73Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval73.smallest_change([1,2,3,5,4,7,9,6]) == 4\n    assert HumanEval73.smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert HumanEval73.smallest_change([1, 4, 2]) == 1\n    assert HumanEval73.smallest_change([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval73.smallest_change([1, 2, 3, 2, 1]) == 0\n    assert HumanEval73.smallest_change([3, 1, 1, 3]) == 0\n    assert HumanEval73.smallest_change([1]) == 0\n    assert HumanEval73.smallest_change([0, 1]) == 1\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval73 do\n\n  @doc ~s\"\"\"\n  \n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  \n  \"\"\"\n  def smallest_change(arr) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/74","description":null,"tests":"defmodule HumanEval74Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert True\n    assert HumanEval74.total_match([], []) == []\n    assert HumanEval74.total_match([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n    assert HumanEval74.total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]\n    assert HumanEval74.total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]\n    assert HumanEval74.total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n    assert HumanEval74.total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]\n    assert HumanEval74.total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n    assert HumanEval74.total_match([], [\"this\"]) == []\n    assert HumanEval74.total_match([\"this\"], []) == []\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval74 do\n\n  @doc ~s\"\"\"\n  \n  Write a function that accepts two lists of strings and returns the list that has \n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  \n  \"\"\"\n  def total_match(lst1, lst2) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/75","description":null,"tests":"defmodule HumanEval75Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    assert HumanEval75.is_multiply_prime(5) == False\n    assert HumanEval75.is_multiply_prime(30) == True\n    assert HumanEval75.is_multiply_prime(8) == True\n    assert HumanEval75.is_multiply_prime(10) == False\n    assert HumanEval75.is_multiply_prime(125) == True\n    assert HumanEval75.is_multiply_prime(3 * 5 * 7) == True\n    assert HumanEval75.is_multiply_prime(3 * 6 * 7) == False\n    assert HumanEval75.is_multiply_prime(9 * 9 * 9) == False\n    assert HumanEval75.is_multiply_prime(11 * 9 * 9) == False\n    assert HumanEval75.is_multiply_prime(11 * 13 * 7) == True\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval75 do\n\n  @doc ~s\"\"\"\n  Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100. \n  Example:\n  is_multiply_prime(30) == True\n  30 = 2 * 3 * 5\n  \n  \"\"\"\n  def is_multiply_prime(a) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/76","description":null,"tests":"defmodule HumanEval76Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval76.is_simple_power(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert HumanEval76.is_simple_power(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert HumanEval76.is_simple_power(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert HumanEval76.is_simple_power(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert HumanEval76.is_simple_power(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert HumanEval76.is_simple_power(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert HumanEval76.is_simple_power(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert HumanEval76.is_simple_power(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval76.is_simple_power(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert HumanEval76.is_simple_power(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval76 do\n\n  @doc ~s\"\"\"\n  Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  \n  \"\"\"\n  def is_simple_power(x, n) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/77","description":null,"tests":"defmodule HumanEval77Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval77.iscube(1) == True\n    assert HumanEval77.iscube(2) == False\n    assert HumanEval77.iscube(-1) == True\n    assert HumanEval77.iscube(64) == True\n    assert HumanEval77.iscube(180) == False\n    assert HumanEval77.iscube(1000) == True\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval77.iscube(0) == True\n    assert HumanEval77.iscube(1729) == False\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval77 do\n\n  @doc ~s\"\"\"\n  \n  Write a function that takes an integer a and returns True \n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> True\n  iscube(2) ==> False\n  iscube(-1) ==> True\n  iscube(64) ==> True\n  iscube(0) ==> True\n  iscube(180) ==> False\n  \n  \"\"\"\n  def iscube(a) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/78","description":null,"tests":"defmodule HumanEval78Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval78.hex_key(\"AB\") == 1\n    assert HumanEval78.hex_key(\"1077E\") == 2\n    assert HumanEval78.hex_key(\"ABED1A33\") == 4\n    assert HumanEval78.hex_key(\"2020\") == 2\n    assert HumanEval78.hex_key(\"123456789ABCDEF0\") == 6\n    assert HumanEval78.hex_key(\"112233445566778899AABBCCDDEEFF00\") == 12\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval78.hex_key([]) == 0\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval78 do\n\n  @doc ~s\"\"\"\n  You have been tasked to write a function that receives \n  a hexadecimal number as a string and counts the number of hexadecimal \n  digits that are primes (prime number, or a prime, is a natural number \n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n  Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n  So you have to determine a number of the following digits: 2, 3, 5, 7, \n  B (=decimal 11), D (=decimal 13).\n  Note: you may assume the input is always correct or empty string, \n  and symbols A,B,C,D,E,F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  \n  \"\"\"\n  def hex_key(num) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/79","description":null,"tests":"defmodule HumanEval79Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval79.decimal_to_binary(0) == \"db0db\"\n    assert HumanEval79.decimal_to_binary(32) == \"db100000db\"\n    assert HumanEval79.decimal_to_binary(103) == \"db1100111db\"\n    assert HumanEval79.decimal_to_binary(15) == \"db1111db\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval79 do\n\n  @doc ~s\"\"\"\n  You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  \n  \"\"\"\n  def decimal_to_binary(decimal) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/80","description":null,"tests":"defmodule HumanEval80Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval80.is_happy(\"a\") == False \n    assert HumanEval80.is_happy(\"aa\") == False \n    assert HumanEval80.is_happy(\"abcd\") == True \n    assert HumanEval80.is_happy(\"aabb\") == False \n    assert HumanEval80.is_happy(\"adb\") == True \n    assert HumanEval80.is_happy(\"xyy\") == False \n    assert HumanEval80.is_happy(\"iopaxpoi\") == True \n    assert HumanEval80.is_happy(\"iopaxioi\") == False \n\n  end\nend\n","code_context_before":"defmodule HumanEval80 do\n\n  @doc ~s\"\"\"\n  You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => False\n  is_happy(aa) => False\n  is_happy(abcd) => True\n  is_happy(aabb) => False\n  is_happy(adb) => True\n  is_happy(xyy) => False\n  \n  \"\"\"\n  def is_happy(s) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/81","description":null,"tests":"defmodule HumanEval81Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval81.numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    assert HumanEval81.numerical_letter_grade([1.2]) == [\"D+\"]\n    assert HumanEval81.numerical_letter_grade([0.5]) == [\"D-\"]\n    assert HumanEval81.numerical_letter_grade([0.0]) == [\"E\"]\n    assert HumanEval81.numerical_letter_grade([1, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n    assert HumanEval81.numerical_letter_grade([0, 0.7]) == [\"E\", \"D-\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval81 do\n\n  @doc ~s\"\"\"\n  It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write \n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A \n          > 3.3                A- \n          > 3.0                B+\n          > 2.7                B \n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+ \n          > 0.7                D \n          > 0.0                D-\n            0.0                E\n  \n\n  Example:\n  grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  \n  \"\"\"\n  def numerical_letter_grade(grades) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/82","description":null,"tests":"defmodule HumanEval82Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval82.prime_length(\"Hello\") == True\n    assert HumanEval82.prime_length(\"abcdcba\") == True\n    assert HumanEval82.prime_length(\"kittens\") == True\n    assert HumanEval82.prime_length(\"orange\") == False\n    assert HumanEval82.prime_length(\"wow\") == True\n    assert HumanEval82.prime_length(\"world\") == True\n    assert HumanEval82.prime_length(\"MadaM\") == True\n    assert HumanEval82.prime_length(\"Wow\") == True\n    assert HumanEval82.prime_length(\"\") == False\n    assert HumanEval82.prime_length(\"HI\") == True\n    assert HumanEval82.prime_length(\"go\") == True\n    assert HumanEval82.prime_length(\"gogo\") == False\n    assert HumanEval82.prime_length(\"aaaaaaaaaaaaaaa\") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval82.prime_length(\"Madam\") == True\n    assert HumanEval82.prime_length(\"M\") == False\n    assert HumanEval82.prime_length(\"0\") == False\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval82 do\n\n  @doc ~s\"\"\"\n  Write a function that takes a string and returns True if the string\n  length is a prime number or False otherwise\n  Examples\n  prime_length('Hello') == True\n  prime_length('abcdcba') == True\n  prime_length('kittens') == True\n  prime_length('orange') == False\n  \n  \"\"\"\n  def prime_length(string) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/83","description":null,"tests":"defmodule HumanEval83Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert True\n    assert HumanEval83.starts_one_ends(1) == 1\n    assert HumanEval83.starts_one_ends(2) == 18\n    assert HumanEval83.starts_one_ends(3) == 180\n    assert HumanEval83.starts_one_ends(4) == 1800\n    assert HumanEval83.starts_one_ends(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval83 do\n\n  @doc ~s\"\"\"\n  \n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  \n  \"\"\"\n  def starts_one_ends(n) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/84","description":null,"tests":"defmodule HumanEval84Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert True\n    assert HumanEval84.solve(1000) == \"1\"\n    assert HumanEval84.solve(150) == \"110\"\n    assert HumanEval84.solve(147) == \"1100\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n    assert HumanEval84.solve(333) == \"1001\"\n    assert HumanEval84.solve(963) == \"10010\"\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval84 do\n\n  @doc ~s\"\"\"\n  Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  \n  \"\"\"\n  def solve(N) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/85","description":null,"tests":"defmodule HumanEval85Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval85.add([4, 88]) == 88\n    assert HumanEval85.add([4, 5, 6, 7, 2, 122]) == 122\n    assert HumanEval85.add([4, 0, 6, 7]) == 0\n    assert HumanEval85.add([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n\n  end\nend\n","code_context_before":"defmodule HumanEval85 do\n\n  @doc ~s\"\"\"\n  Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  \n  \"\"\"\n  def add(lst) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/86","description":null,"tests":"defmodule HumanEval86Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval86.anti_shuffle(\"Hi\") == \"Hi\"\n    assert HumanEval86.anti_shuffle(\"hello\") == \"ehllo\"\n    assert HumanEval86.anti_shuffle(\"number\") == \"bemnru\"\n    assert HumanEval86.anti_shuffle(\"abcd\") == \"abcd\"\n    assert HumanEval86.anti_shuffle(\"Hello World!!!\") == \"Hello !!!Wdlor\"\n    assert HumanEval86.anti_shuffle(\"\") == \"\"\n    assert HumanEval86.anti_shuffle(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval86 do\n\n  @doc ~s\"\"\"\n  \n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  \n  \"\"\"\n  def anti_shuffle(s) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/87","description":null,"tests":"defmodule HumanEval87Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    # Check some simple cases\nassert HumanEval87.get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n], 1) == [{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}]\nassert HumanEval87.get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,5,6],\n    [1,2,3,4,5,6],\n    [1,2,3,4,5,6],\n    [1,2,3,4,5,6],\n    [1,2,3,4,5,6]\n], 2) == [{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}]\nassert HumanEval87.get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,5,6],\n    [1,1,3,4,5,6],\n    [1,2,1,4,5,6],\n    [1,2,3,1,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n], 1) == [{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}]\nassert HumanEval87.get_row([], 1) == []\nassert HumanEval87.get_row([[1]], 2) == []\nassert HumanEval87.get_row([[], [1], [1, 2, 3]], 3) == [{2, 2}]\n\n  end\nend\n","code_context_before":"defmodule HumanEval87 do\n\n  @doc ~s\"\"\"\n  \n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  \n  \"\"\"\n  def get_row(lst, x) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/88","description":null,"tests":"defmodule HumanEval88Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert True\n    assert HumanEval88.sort_array([]) == []\n    assert HumanEval88.sort_array([5]) == [5]\n    assert HumanEval88.sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert HumanEval88.sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n    assert HumanEval88.sort_array([2, 1]) == [1, 2]\n    assert HumanEval88.sort_array([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert HumanEval88.sort_array([21, 14, 23, 11]) == [23, 21, 14, 11]\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval88 do\n\n  @doc ~s\"\"\"\n  \n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  \n  \"\"\"\n  def sort_array(array) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/89","description":null,"tests":"defmodule HumanEval89Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval89.encrypt(\"hi\") == \"lm\"\n    assert HumanEval89.encrypt(\"asdfghjkl\") == \"ewhjklnop\"\n    assert HumanEval89.encrypt(\"gf\") == \"kj\"\n    assert HumanEval89.encrypt(\"et\") == \"ix\"\n\n    assert HumanEval89.encrypt(\"faewfawefaewg\")==\"jeiajeaijeiak\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert HumanEval89.encrypt(\"hellomyfriend\")==\"lippsqcjvmirh\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert HumanEval89.encrypt(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")==\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\", \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval89.encrypt(\"a\")==\"e\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval89 do\n\n  @doc ~s\"\"\"\n  Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  \n  \"\"\"\n  def encrypt(s) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/90","description":null,"tests":"defmodule HumanEval90Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval90.next_smallest([1, 2, 3, 4, 5]) == 2\n    assert HumanEval90.next_smallest([5, 1, 4, 3, 2]) == 2\n    assert HumanEval90.next_smallest([]) == None\n    assert HumanEval90.next_smallest([1, 1]) == None\n    assert HumanEval90.next_smallest([1,1,1,1,0]) == 1\n    assert HumanEval90.next_smallest([1, 0**0]) == None\n    assert HumanEval90.next_smallest([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval90 do\n\n  @doc ~s\"\"\"\n  \n  You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return None if there is no such element.\n  \n  next_smallest([1, 2, 3, 4, 5]) == 2\n  next_smallest([5, 1, 4, 3, 2]) == 2\n  next_smallest([]) == None\n  next_smallest([1, 1]) == None\n  \n  \"\"\"\n  def next_smallest(lst) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/91","description":null,"tests":"defmodule HumanEval91Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval91.is_bored(\"Hello world\") == 0\n    assert HumanEval91.is_bored(\"Is the sky blue?\") == 0\n    assert HumanEval91.is_bored(\"I love It !\") == 1\n    assert HumanEval91.is_bored(\"bIt\") == 0\n    assert HumanEval91.is_bored(\"I feel good today. I will be productive. will kill It\") == 2\n    assert HumanEval91.is_bored(\"You and I are going for a walk\") == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval91 do\n\n  @doc ~s\"\"\"\n  \n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  \n  \"\"\"\n  def is_bored(S) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/92","description":null,"tests":"defmodule HumanEval92Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval92.any_int(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert HumanEval92.any_int(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert HumanEval92.any_int(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert HumanEval92.any_int(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert HumanEval92.any_int(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert HumanEval92.any_int(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert HumanEval92.any_int(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval92.any_int(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert HumanEval92.any_int(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert HumanEval92.any_int(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval92 do\n\n  @doc ~s\"\"\"\n  \n  Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  \n  Examples\n  any_int(5, 2, 7) ➞ True\n  \n  any_int(3, 2, 2) ➞ False\n\n  any_int(3, -2, 1) ➞ True\n  \n  any_int(3.6, -2.2, 2) ➞ False\n\n\n  \n  \n  \"\"\"\n  def any_int(x, y, z) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/93","description":null,"tests":"defmodule HumanEval93Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval93.encode(\"TEST\") == \"tgst\"\n    assert HumanEval93.encode(\"Mudasir\") == \"mWDCSKR\"\n    assert HumanEval93.encode(\"YES\") == \"ygs\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval93.encode(\"This is a message\") == \"tHKS KS C MGSSCGG\"\n    assert HumanEval93.encode(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval93 do\n\n  @doc ~s\"\"\"\n  \n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  \n  \"\"\"\n  def encode(message) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/94","description":null,"tests":"defmodule HumanEval94Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval94.skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10\n\n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval94.skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25\n\n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval94.skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13\n\n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval94.skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval94.skjkasdkd([0,81,12,3,1,21]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval94.skjkasdkd([0,8,1,2,1,7]) == 7\n\n    assert HumanEval94.skjkasdkd([8191]) == 19\n    assert HumanEval94.skjkasdkd([8191, 123456, 127, 7]) == 19\n    assert HumanEval94.skjkasdkd([127, 97, 8192]) == 10\n\n  end\nend\n","code_context_before":"defmodule HumanEval94 do\n\n  @doc ~s\"\"\"\n  You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  \n  \"\"\"\n  def skjkasdkd(lst) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/95","description":null,"tests":"defmodule HumanEval95Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    assert HumanEval95.check_dict_case(%{\"p\" => \"pineapple\", \"b\" => \"banana\"}) == True\nassert HumanEval95.check_dict_case(%{\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}) == False\nassert HumanEval95.check_dict_case(%{\"p\" => \"pineapple\", 5 => \"banana\", \"a\" => \"apple\"}) == False\nassert HumanEval95.check_dict_case(%{\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}) == False\nassert HumanEval95.check_dict_case(%{\"STATE\" => \"NC\", \"ZIP\" => \"12345\" }) == True\nassert HumanEval95.check_dict_case(%{\"fruit\" => \"Orange\", \"taste\" => \"Sweet\" }) == True\n\n  end\nend\n","code_context_before":"defmodule HumanEval95 do\n\n  @doc ~s\"\"\"\n  \n  Given a dictionary, return True if all keys are strings in lower \n  case or all keys are strings in upper case, else return False.\n  The function should return False is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n  \n  \"\"\"\n  def check_dict_case(dict) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/96","description":null,"tests":"defmodule HumanEval96Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    assert HumanEval96.count_up_to(5) == [2,3]\n    assert HumanEval96.count_up_to(6) == [2,3,5]\n    assert HumanEval96.count_up_to(7) == [2,3,5]\n    assert HumanEval96.count_up_to(10) == [2,3,5,7]\n    assert HumanEval96.count_up_to(0) == []\n    assert HumanEval96.count_up_to(22) == [2,3,5,7,11,13,17,19]\n    assert HumanEval96.count_up_to(1) == []\n    assert HumanEval96.count_up_to(18) == [2,3,5,7,11,13,17]\n    assert HumanEval96.count_up_to(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert HumanEval96.count_up_to(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval96 do\n\n  @doc ~s\"\"\"\n  Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  \n  \"\"\"\n  def count_up_to(n) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/97","description":null,"tests":"defmodule HumanEval97Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval97.multiply(148, 412) == 16\n    assert HumanEval97.multiply(19, 28) == 72\n    assert HumanEval97.multiply(2020, 1851) == 0\n    assert HumanEval97.multiply(14,-15) == 20\n    assert HumanEval97.multiply(76, 67) == 42\n    assert HumanEval97.multiply(17, 27) == 49\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval97.multiply(0, 1) == 0\n    assert HumanEval97.multiply(0, 0) == 0\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval97 do\n\n  @doc ~s\"\"\"\n  Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  \n  \"\"\"\n  def multiply(a, b) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/98","description":null,"tests":"defmodule HumanEval98Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval98.count_upper(\"aBCdEf\")  == 1\n    assert HumanEval98.count_upper(\"abcdefg\") == 0\n    assert HumanEval98.count_upper(\"dBBE\") == 0\n    assert HumanEval98.count_upper(\"B\")  == 0\n    assert HumanEval98.count_upper(\"U\")  == 1\n    assert HumanEval98.count_upper(\"\") == 0\n    assert HumanEval98.count_upper(\"EEEE\") == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval98 do\n\n  @doc ~s\"\"\"\n  \n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  \n  \"\"\"\n  def count_upper(s) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/99","description":null,"tests":"defmodule HumanEval99Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval99.closest_integer(\"10\") == 10\n    assert HumanEval99.closest_integer(\"14.5\") == 15\n    assert HumanEval99.closest_integer(\"-15.5\") == -16\n    assert HumanEval99.closest_integer(\"15.3\") == 15\n\n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval99.closest_integer(\"0\") == 0\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval99 do\n\n  @doc ~s\"\"\"\n  \n  Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  \n  \"\"\"\n  def closest_integer(value) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/100","description":null,"tests":"defmodule HumanEval100Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval100.make_a_pile(3) == [3, 5, 7]\n    assert HumanEval100.make_a_pile(4) == [4,6,8,10]\n    assert HumanEval100.make_a_pile(5) == [5, 7, 9, 11, 13]\n    assert HumanEval100.make_a_pile(6) == [6, 8, 10, 12, 14, 16]\n    assert HumanEval100.make_a_pile(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval100 do\n\n  @doc ~s\"\"\"\n  \n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  \n  \"\"\"\n  def make_a_pile(n) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/101","description":null,"tests":"defmodule HumanEval101Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert True\n    assert HumanEval101.words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert HumanEval101.words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert HumanEval101.words_string(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert HumanEval101.words_string(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n    assert HumanEval101.words_string(\"\") == []\n    assert HumanEval101.words_string(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval101 do\n\n  @doc ~s\"\"\"\n  \n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  \n  \"\"\"\n  def words_string(s) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/102","description":null,"tests":"defmodule HumanEval102Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval102.choose_num(12, 15) == 14\n    assert HumanEval102.choose_num(13, 12) == -1\n    assert HumanEval102.choose_num(33, 12354) == 12354\n    assert HumanEval102.choose_num(5234, 5233) == -1\n    assert HumanEval102.choose_num(6, 29) == 28\n    assert HumanEval102.choose_num(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval102.choose_num(7, 7) == -1\n    assert HumanEval102.choose_num(546, 546) == 546\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval102 do\n\n  @doc ~s\"\"\"\n  This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  \n  \"\"\"\n  def choose_num(x, y) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/103","description":null,"tests":"defmodule HumanEval103Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval103.rounded_avg(1, 5) == \"0b11\"\n    assert HumanEval103.rounded_avg(7, 13) == \"0b1010\"\n    assert HumanEval103.rounded_avg(964,977) == \"0b1111001010\"\n    assert HumanEval103.rounded_avg(996,997) == \"0b1111100100\"\n    assert HumanEval103.rounded_avg(560,851) == \"0b1011000010\"\n    assert HumanEval103.rounded_avg(185,546) == \"0b101101110\"\n    assert HumanEval103.rounded_avg(362,496) == \"0b110101101\"\n    assert HumanEval103.rounded_avg(350,902) == \"0b1001110010\"\n    assert HumanEval103.rounded_avg(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval103.rounded_avg(7, 5) == -1\n    assert HumanEval103.rounded_avg(5, 1) == -1\n    assert HumanEval103.rounded_avg(5, 5) == \"0b101\"\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval103 do\n\n  @doc ~s\"\"\"\n  You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  \n  \"\"\"\n  def rounded_avg(n, m) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/104","description":null,"tests":"defmodule HumanEval104Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval104.unique_digits([15, 33, 1422, 1]) == [1, 15, 33]\n    assert HumanEval104.unique_digits([152, 323, 1422, 10]) == []\n    assert HumanEval104.unique_digits([12345, 2033, 111, 151]) == [111, 151]\n    assert HumanEval104.unique_digits([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval104 do\n\n  @doc ~s\"\"\"\n  Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  \n  \"\"\"\n  def unique_digits(x) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/105","description":null,"tests":"defmodule HumanEval105Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert True\n    assert HumanEval105.by_length([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    assert HumanEval105.by_length([]) == []\n    assert HumanEval105.by_length([1, -1 , 55]) == [\"One\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n    assert HumanEval105.by_length([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert HumanEval105.by_length([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval105 do\n\n  @doc ~s\"\"\"\n  \n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  \n  \"\"\"\n  def by_length(arr) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/106","description":null,"tests":"defmodule HumanEval106Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    assert HumanEval106.f(5) == [1, 2, 6, 24, 15]\n    assert HumanEval106.f(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert HumanEval106.f(1) == [1]\n    assert HumanEval106.f(3) == [1, 2, 6]\n\n  end\nend\n","code_context_before":"defmodule HumanEval106 do\n\n  @doc ~s\"\"\"\n   Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  \n  \"\"\"\n  def f(n) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/107","description":null,"tests":"defmodule HumanEval107Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval107.even_odd_palindrome(123) == {8, 13}\n    assert HumanEval107.even_odd_palindrome(12) == {4, 6}\n    assert HumanEval107.even_odd_palindrome(3) == {1, 2}\n    assert HumanEval107.even_odd_palindrome(63) == {6, 8}\n    assert HumanEval107.even_odd_palindrome(25) == {5, 6}\n    assert HumanEval107.even_odd_palindrome(19) == {4, 6}\n    assert HumanEval107.even_odd_palindrome(9) == {4, 5}, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval107.even_odd_palindrome(1) == {0, 1}, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval107 do\n\n  @doc ~s\"\"\"\n  \n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  \n  \"\"\"\n  def even_odd_palindrome(n) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/108","description":null,"tests":"defmodule HumanEval108Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval108.count_nums([]) == 0\n    assert HumanEval108.count_nums([-1, -2, 0]) == 0\n    assert HumanEval108.count_nums([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert HumanEval108.count_nums([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert HumanEval108.count_nums([1, 100, 98, -7, 1, -1]) == 4\n    assert HumanEval108.count_nums([12, 23, 34, -45, -56, 0]) == 5\n    assert HumanEval108.count_nums([-0, 1**0]) == 1\n    assert HumanEval108.count_nums([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval108 do\n\n  @doc ~s\"\"\"\n  \n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  \n  \"\"\"\n  def count_nums(arr) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/109","description":null,"tests":"defmodule HumanEval109Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval109.move_one_ball([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert HumanEval109.move_one_ball([3, 5, 10, 1, 2])==True\n    assert HumanEval109.move_one_ball([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval109.move_one_ball([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert HumanEval109.move_one_ball([])==True\n\n  end\nend\n","code_context_before":"defmodule HumanEval109 do\n\n  @doc ~s\"\"\"\n  We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return True else return False.\n  If the given array is empty then return True.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  move_one_ball([3, 4, 5, 1, 2])==>True\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  move_one_ball([3, 5, 4, 1, 2])==>False\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  \n  \"\"\"\n  def move_one_ball(arr) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/110","description":null,"tests":"defmodule HumanEval110Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval110.exchange([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert HumanEval110.exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert HumanEval110.exchange([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert HumanEval110.exchange([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert HumanEval110.exchange([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert HumanEval110.exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval110.exchange([100, 200], [200, 200]) == \"YES\"\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval110 do\n\n  @doc ~s\"\"\"\n  In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  \n  \"\"\"\n  def exchange(lst1, lst2) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/111","description":null,"tests":"defmodule HumanEval111Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    # Check some simple cases\nassert HumanEval111.histogram(\"a b b a\") == %{\"a\" => 2,\"b\" => 2}\nassert HumanEval111.histogram(\"a b c a b\") == %{\"a\" => 2, \"b\" => 2}\nassert HumanEval111.histogram(\"a b c d g\") == %{\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1}\nassert HumanEval111.histogram(\"r t g\") == %{\"r\" => 1,\"t\" => 1,\"g\" => 1}\nassert HumanEval111.histogram(\"b b b b a\") == %{\"b\" => 4}\nassert HumanEval111.histogram(\"r t g\") == %{\"r\" => 1,\"t\" => 1,\"g\" => 1}\n    \n# Check some edge cases that are easy to work out by hand.\nassert HumanEval111.histogram(\"\") == %{}\nassert HumanEval111.histogram(\"a\") == %{\"a\" => 1}\n\n  end\nend\n","code_context_before":"defmodule HumanEval111 do\n\n  @doc ~s\"\"\"\n  Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  \n  \"\"\"\n  def histogram(test) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/112","description":null,"tests":"defmodule HumanEval112Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    assert HumanEval112.reverse_delete(\"abcde\",\"ae\") == {\"bcd\",False}\n    assert HumanEval112.reverse_delete(\"abcdef\", \"b\") == {\"acdef\",False}\n    assert HumanEval112.reverse_delete(\"abcdedcba\",\"ab\") == {\"cdedc\",True}\n    assert HumanEval112.reverse_delete(\"dwik\",\"w\") == {\"dik\",False}\n    assert HumanEval112.reverse_delete(\"a\",\"a\") == {\"\",True}\n    assert HumanEval112.reverse_delete(\"abcdedcba\",\"\") == {\"abcdedcba\",True}\n    assert HumanEval112.reverse_delete(\"abcdedcba\",\"v\") == {\"abcdedcba\",True}\n    assert HumanEval112.reverse_delete(\"vabba\",\"v\") == {\"abba\",True}\n    assert HumanEval112.reverse_delete(\"mamma\", \"mia\") == {\"\", True}\n\n  end\nend\n","code_context_before":"defmodule HumanEval112 do\n\n  @doc ~s\"\"\"\n  Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and True/False for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n  \n  \"\"\"\n  def reverse_delete(s,c) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/113","description":null,"tests":"defmodule HumanEval113Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval113.odd_count([\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    assert HumanEval113.odd_count([\"3\",\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    assert HumanEval113.odd_count([\"271\", \"137\", \"314\"]) == [\n        \"the number of odd elements 2n the str2ng 2 of the 2nput.\",\n        \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\n        \"the number of odd elements 2n the str2ng 2 of the 2nput.\"\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval113 do\n\n  @doc ~s\"\"\"\n  Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  \n  \"\"\"\n  def odd_count(lst) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/114","description":null,"tests":"defmodule HumanEval114Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval114.min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n    assert HumanEval114.min_sub_array_sum([-1, -2, -3]) == -6\n    assert HumanEval114.min_sub_array_sum([-1, -2, -3, 2, -10]) == -14\n    assert HumanEval114.min_sub_array_sum([-9999999999999999]) == -9999999999999999\n    assert HumanEval114.min_sub_array_sum([0, 10, 20, 1000000]) == 0\n    assert HumanEval114.min_sub_array_sum([-1, -2, -3, 10, -5]) == -6\n    assert HumanEval114.min_sub_array_sum([100, -1, -2, -3, 10, -5]) == -6\n    assert HumanEval114.min_sub_array_sum([10, 11, 13, 8, 3, 4]) == 3\n    assert HumanEval114.min_sub_array_sum([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval114.min_sub_array_sum([-10]) == -10\n    assert HumanEval114.min_sub_array_sum([7]) == 7\n    assert HumanEval114.min_sub_array_sum([1, -1]) == -1\n\n  end\nend\n","code_context_before":"defmodule HumanEval114 do\n\n  @doc ~s\"\"\"\n  \n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  \n  \"\"\"\n  def min_sub_array_sum(nums) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/115","description":null,"tests":"defmodule HumanEval115Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n\n    # Check some simple cases\n    assert True\n    assert HumanEval115.max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6\n    assert HumanEval115.max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5\n    assert HumanEval115.max_fill([[0,0,0], [0,0,0]], 5) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n    assert HumanEval115.max_fill([[1,1,1,1], [1,1,1,1]], 2) == 4\n    assert HumanEval115.max_fill([[1,1,1,1], [1,1,1,1]], 9) == 2\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval115 do\n\n  @doc ~s\"\"\"\n  \n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  \n  \"\"\"\n  def max_fill(grid, capacity) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/116","description":null,"tests":"defmodule HumanEval116Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert True\n    assert HumanEval116.sort_array([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert HumanEval116.sort_array([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert HumanEval116.sort_array([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert HumanEval116.sort_array([]) == []\n    assert HumanEval116.sort_array([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert HumanEval116.sort_array([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert HumanEval116.sort_array([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert HumanEval116.sort_array([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval116 do\n\n  @doc ~s\"\"\"\n  \n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  \n  \"\"\"\n  def sort_array(arr) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/117","description":null,"tests":"defmodule HumanEval117Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval117.select_words(\"Mary had a little lamb\", 4) == [\"little\"]\n    assert HumanEval117.select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n    assert HumanEval117.select_words(\"simple white space\", 2) == []\n    assert HumanEval117.select_words(\"Hello world\", 4) == [\"world\"]\n    assert HumanEval117.select_words(\"Uncle sam\", 3) == [\"Uncle\"]\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval117.select_words(\"\", 4) == []\n    assert HumanEval117.select_words(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"]\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval117 do\n\n  @doc ~s\"\"\"\n  Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  \n  \"\"\"\n  def select_words(s, n) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/118","description":null,"tests":"defmodule HumanEval118Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval118.get_closest_vowel(\"yogurt\") == \"u\"\n    assert HumanEval118.get_closest_vowel(\"full\") == \"u\"\n    assert HumanEval118.get_closest_vowel(\"easy\") == \"\"\n    assert HumanEval118.get_closest_vowel(\"eAsy\") == \"\"\n    assert HumanEval118.get_closest_vowel(\"ali\") == \"\"\n    assert HumanEval118.get_closest_vowel(\"bad\") == \"a\"\n    assert HumanEval118.get_closest_vowel(\"most\") == \"o\"\n    assert HumanEval118.get_closest_vowel(\"ab\") == \"\"\n    assert HumanEval118.get_closest_vowel(\"ba\") == \"\"\n    assert HumanEval118.get_closest_vowel(\"quick\") == \"\"\n    assert HumanEval118.get_closest_vowel(\"anime\") == \"i\"\n    assert HumanEval118.get_closest_vowel(\"Asia\") == \"\"\n    assert HumanEval118.get_closest_vowel(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval118 do\n\n  @doc ~s\"\"\"\n  You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  get_closest_vowel(\"yogurt\") ==> \"u\"\n  get_closest_vowel(\"FULL\") ==> \"U\"\n  get_closest_vowel(\"quick\") ==> \"\"\n  get_closest_vowel(\"ab\") ==> \"\"\n  \n  \"\"\"\n  def get_closest_vowel(word) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/119","description":null,"tests":"defmodule HumanEval119Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval119.match_parens([\"()(\", \")\"]) == \"Yes\"\n    assert HumanEval119.match_parens([\")\", \")\"]) == \"No\"\n    assert HumanEval119.match_parens([\"(()(())\", \"())())\"]) == \"No\"\n    assert HumanEval119.match_parens([\")())\", \"(()()(\"]) == \"Yes\"\n    assert HumanEval119.match_parens([\"(())))\", \"(()())((\"]) == \"Yes\"\n    assert HumanEval119.match_parens([\"()\", \"())\"]) == \"No\"\n    assert HumanEval119.match_parens([\"(()(\", \"()))()\"]) == \"Yes\"\n    assert HumanEval119.match_parens([\"((((\", \"((())\"]) == \"No\"\n    assert HumanEval119.match_parens([\")(()\", \"(()(\"]) == \"No\"\n    assert HumanEval119.match_parens([\")(\", \")(\"]) == \"No\"\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval119.match_parens([\"(\", \")\"]) == \"Yes\"\n    assert HumanEval119.match_parens([\")\", \"(\"]) == \"Yes\" \n\n\n  end\nend\n","code_context_before":"defmodule HumanEval119 do\n\n  @doc ~s\"\"\"\n  \n  You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  \n  \"\"\"\n  def match_parens(lst) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/120","description":null,"tests":"defmodule HumanEval120Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval120.maximum([-3, -4, 5], 3) == [-4, -3, 5]\n    assert HumanEval120.maximum([4, -4, 4], 2) == [4, 4]\n    assert HumanEval120.maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert HumanEval120.maximum([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert HumanEval120.maximum([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert HumanEval120.maximum([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert HumanEval120.maximum([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert HumanEval120.maximum([1, 0, 5, -7], 1) == [5]\n    assert HumanEval120.maximum([4, -4], 2) == [-4, 4]\n    assert HumanEval120.maximum([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval120.maximum([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval120 do\n\n  @doc ~s\"\"\"\n  \n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  \n  \"\"\"\n  def maximum(arr, k) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/121","description":null,"tests":"defmodule HumanEval121Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval121.solution([5, 8, 7, 1])    == 12\n    assert HumanEval121.solution([3, 3, 3, 3, 3]) == 9\n    assert HumanEval121.solution([30, 13, 24, 321]) == 0\n    assert HumanEval121.solution([5, 9]) == 5\n    assert HumanEval121.solution([2, 4, 8]) == 0\n    assert HumanEval121.solution([30, 13, 23, 32]) == 23\n    assert HumanEval121.solution([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval121 do\n\n  @doc ~s\"\"\"\n  Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  \n  \"\"\"\n  def solution(lst) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/122","description":null,"tests":"defmodule HumanEval122Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval122.add_elements([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert HumanEval122.add_elements([111,121,3,4000,5,6], 2) == 0\n    assert HumanEval122.add_elements([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert HumanEval122.add_elements([111,21,3,4000,5,6,7,8,9], 4) == 24\n\n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval122.add_elements([1], 1) == 1\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval122 do\n\n  @doc ~s\"\"\"\n  \n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  \n  \"\"\"\n  def add_elements(arr, k) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/123","description":null,"tests":"defmodule HumanEval123Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval123.get_odd_collatz(14) == [1, 5, 7, 11, 13, 17]\n    assert HumanEval123.get_odd_collatz(5) == [1, 5]\n    assert HumanEval123.get_odd_collatz(12) == [1, 3, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval123.get_odd_collatz(1) == [1]\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval123 do\n\n  @doc ~s\"\"\"\n  \n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  \n  \"\"\"\n  def get_odd_collatz(n) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/124","description":null,"tests":"defmodule HumanEval124Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval124.valid_date(\"03-11-2000\") == True\n\n    assert HumanEval124.valid_date(\"15-01-2012\") == False\n\n    assert HumanEval124.valid_date(\"04-0-2040\") == False\n\n    assert HumanEval124.valid_date(\"06-04-2020\") == True\n\n    assert HumanEval124.valid_date(\"01-01-2007\") == True\n\n    assert HumanEval124.valid_date(\"03-32-2011\") == False\n\n    assert HumanEval124.valid_date(\"\") == False\n\n    assert HumanEval124.valid_date(\"04-31-3000\") == False\n\n    assert HumanEval124.valid_date(\"06-06-2005\") == True\n\n    assert HumanEval124.valid_date(\"21-31-2000\") == False\n\n    assert HumanEval124.valid_date(\"04-12-2003\") == True\n\n    assert HumanEval124.valid_date(\"04122003\") == False\n\n    assert HumanEval124.valid_date(\"20030412\") == False\n\n    assert HumanEval124.valid_date(\"2003-04\") == False\n\n    assert HumanEval124.valid_date(\"2003-04-12\") == False\n\n    assert HumanEval124.valid_date(\"04-2003\") == False\n\n  end\nend\n","code_context_before":"defmodule HumanEval124 do\n\n  @doc ~s\"\"\"\n  You have to write a function which validates a given date string and\n  returns True if the date is valid otherwise False.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => True\n\n  valid_date('15-01-2012') => False\n\n  valid_date('04-0-2040') => False\n\n  valid_date('06-04-2020') => True\n\n  valid_date('06/04/2020') => False\n  \n  \"\"\"\n  def valid_date(date) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/125","description":null,"tests":"defmodule HumanEval125Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    assert HumanEval125.split_words(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert HumanEval125.split_words(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert HumanEval125.split_words(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert HumanEval125.split_words(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert HumanEval125.split_words(\"abcdef\") == 3\n    assert HumanEval125.split_words(\"aaabb\") == 2\n    assert HumanEval125.split_words(\"aaaBb\") == 1\n    assert HumanEval125.split_words(\"\") == 0\n\n  end\nend\n","code_context_before":"defmodule HumanEval125 do\n\n  @doc ~s\"\"\"\n  \n  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3 \n  \n  \"\"\"\n  def split_words(txt) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/126","description":null,"tests":"defmodule HumanEval126Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval126.is_sorted([5]) == True\n    assert HumanEval126.is_sorted([1, 2, 3, 4, 5]) == True\n    assert HumanEval126.is_sorted([1, 3, 2, 4, 5]) == False\n    assert HumanEval126.is_sorted([1, 2, 3, 4, 5, 6]) == True\n    assert HumanEval126.is_sorted([1, 2, 3, 4, 5, 6, 7]) == True\n    assert HumanEval126.is_sorted([1, 3, 2, 4, 5, 6, 7]) == False\n    assert HumanEval126.is_sorted([]) == True\n    assert HumanEval126.is_sorted([1]) == True\n    assert HumanEval126.is_sorted([3, 2, 1]) == False\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval126.is_sorted([1, 2, 2, 2, 3, 4]) == False\n    assert HumanEval126.is_sorted([1, 2, 3, 3, 3, 4]) == False\n    assert HumanEval126.is_sorted([1, 2, 2, 3, 3, 4]) == True\n    assert HumanEval126.is_sorted([1, 2, 3, 4]) == True\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval126 do\n\n  @doc ~s\"\"\"\n  \n  Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return False. Assume no negative numbers and only integers.\n\n  Examples\n  is_sorted([5]) ➞ True\n  is_sorted([1, 2, 3, 4, 5]) ➞ True\n  is_sorted([1, 3, 2, 4, 5]) ➞ False\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ True\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ True\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ False\n  \n  \"\"\"\n  def is_sorted(lst) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/127","description":null,"tests":"defmodule HumanEval127Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    assert HumanEval127.intersection({1, 2}, {2, 3}) == \"NO\"\nassert HumanEval127.intersection({-1, 1}, {0, 4}) == \"NO\"\nassert HumanEval127.intersection({-3, -1}, {-5, 5}) == \"YES\"\nassert HumanEval127.intersection({-2, 2}, {-4, 0}) == \"YES\"\n\n# Check some edge cases that are easy to work out by hand.\nassert HumanEval127.intersection({-11, 2}, {-1, -1}) == \"NO\"\nassert HumanEval127.intersection({1, 2}, {3, 5}) == \"NO\"\nassert HumanEval127.intersection({1, 2}, {1, 2}) == \"NO\"\nassert HumanEval127.intersection({-2, -2}, {-3, -2}) == \"NO\"\n\n  end\nend\n","code_context_before":"defmodule HumanEval127 do\n\n  @doc ~s\"\"\"\n  You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  \n  \"\"\"\n  def intersection(interval1, interval2) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/128","description":null,"tests":"defmodule HumanEval128Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert True\n    assert HumanEval128.prod_signs([1, 2, 2, -4]) == -9\n    assert HumanEval128.prod_signs([0, 1]) == 0\n    assert HumanEval128.prod_signs([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert HumanEval128.prod_signs([]) == None\n    assert HumanEval128.prod_signs([2, 4,1, 2, -1, -1, 9]) == 20\n    assert HumanEval128.prod_signs([-1, 1, -1, 1]) == 4\n    assert HumanEval128.prod_signs([-1, 1, 1, 1]) == -4\n    assert HumanEval128.prod_signs([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval128 do\n\n  @doc ~s\"\"\"\n  \n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return None for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == None\n  \n  \"\"\"\n  def prod_signs(arr) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/129","description":null,"tests":"defmodule HumanEval129Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval129.min_path([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert HumanEval129.min_path([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert HumanEval129.min_path([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert HumanEval129.min_path([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert HumanEval129.min_path([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert HumanEval129.min_path([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert HumanEval129.min_path([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert HumanEval129.min_path([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert HumanEval129.min_path([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval129.min_path([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert HumanEval129.min_path([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval129 do\n\n  @doc ~s\"\"\"\n  \n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  \n  \"\"\"\n  def min_path(grid, k) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/130","description":null,"tests":"defmodule HumanEval130Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    \n    assert HumanEval130.tri(3) == [1, 3, 2.0, 8.0]\n    assert HumanEval130.tri(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert HumanEval130.tri(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert HumanEval130.tri(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert HumanEval130.tri(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert HumanEval130.tri(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert HumanEval130.tri(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert HumanEval130.tri(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval130.tri(0) == [1]\n    assert HumanEval130.tri(1) == [1, 3]\n\n  end\nend\n","code_context_before":"defmodule HumanEval130 do\n\n  @doc ~s\"\"\"\n  Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  \n  \"\"\"\n  def tri(n) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/131","description":null,"tests":"defmodule HumanEval131Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval131.digits(5) == 5\n    assert HumanEval131.digits(54) == 5\n    assert HumanEval131.digits(120) ==1\n    assert HumanEval131.digits(5014) == 5\n    assert HumanEval131.digits(98765) == 315\n    assert HumanEval131.digits(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval131.digits(2468) == 0\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval131 do\n\n  @doc ~s\"\"\"\n  Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  \n  \"\"\"\n  def digits(n) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/132","description":null,"tests":"defmodule HumanEval132Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval132.is_nested(\"[[]]\") == True\n    assert HumanEval132.is_nested(\"[]]]]]]][[[[[]\") == False\n    assert HumanEval132.is_nested(\"[][]\") == False\n    assert HumanEval132.is_nested((\"[]\")) == False\n    assert HumanEval132.is_nested(\"[[[[]]]]\") == True\n    assert HumanEval132.is_nested(\"[]]]]]]]]]]\") == False\n    assert HumanEval132.is_nested(\"[][][[]]\") == True\n    assert HumanEval132.is_nested(\"[[]\") == False\n    assert HumanEval132.is_nested(\"[]]\") == False\n    assert HumanEval132.is_nested(\"[[]][[\") == True\n    assert HumanEval132.is_nested(\"[[][]]\") == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval132.is_nested(\"\") == False\n    assert HumanEval132.is_nested(\"[[[[[[[[\") == False\n    assert HumanEval132.is_nested(\"]]]]]]]]\") == False\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval132 do\n\n  @doc ~s\"\"\"\n  \n  Create a function that takes a string as input which contains only square brackets.\n  The function should return True if and only if there is a valid subsequence of brackets \n  where at least one bracket in the subsequence is nested.\n\n  is_nested('[[]]') ➞ True\n  is_nested('[]]]]]]][[[[[]') ➞ False\n  is_nested('[][]') ➞ False\n  is_nested('[]') ➞ False\n  is_nested('[[][]]') ➞ True\n  is_nested('[[]][[') ➞ True\n  \n  \"\"\"\n  def is_nested(string) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/133","description":null,"tests":"defmodule HumanEval133Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval133.sum_squares([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert HumanEval133.sum_squares([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert HumanEval133.sum_squares([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert HumanEval133.sum_squares([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert HumanEval133.sum_squares([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert HumanEval133.sum_squares([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert HumanEval133.sum_squares([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert HumanEval133.sum_squares([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert HumanEval133.sum_squares([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval133.sum_squares([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert HumanEval133.sum_squares([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert HumanEval133.sum_squares([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval133 do\n\n  @doc ~s\"\"\"\n  You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  \n\n  \n  \"\"\"\n  def sum_squares(lst) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/134","description":null,"tests":"defmodule HumanEval134Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval134.check_if_last_char_is_a_letter(\"apple\") == False\n    assert HumanEval134.check_if_last_char_is_a_letter(\"apple pi e\") == True\n    assert HumanEval134.check_if_last_char_is_a_letter(\"eeeee\") == False\n    assert HumanEval134.check_if_last_char_is_a_letter(\"A\") == True\n    assert HumanEval134.check_if_last_char_is_a_letter(\"Pumpkin pie \") == False\n    assert HumanEval134.check_if_last_char_is_a_letter(\"Pumpkin pie 1\") == False\n    assert HumanEval134.check_if_last_char_is_a_letter(\"\") == False\n    assert HumanEval134.check_if_last_char_is_a_letter(\"eeeee e \") == False\n    assert HumanEval134.check_if_last_char_is_a_letter(\"apple pie\") == False\n    assert HumanEval134.check_if_last_char_is_a_letter(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval134 do\n\n  @doc ~s\"\"\"\n  \n  Create a function that returns True if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and False otherwise.\n  Note: \"word\" is a group of characters separated by space.\n\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ False\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ True\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ False\n  check_if_last_char_is_a_letter(\"\") ➞ False \n  \n  \"\"\"\n  def check_if_last_char_is_a_letter(txt) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/135","description":null,"tests":"defmodule HumanEval135Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval135.can_arrange([1,2,4,3,5])==3\n    assert HumanEval135.can_arrange([1,2,4,5])==-1\n    assert HumanEval135.can_arrange([1,4,2,5,6,7,8,9,10])==2\n    assert HumanEval135.can_arrange([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval135.can_arrange([])==-1\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval135 do\n\n  @doc ~s\"\"\"\n  Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  \n  \"\"\"\n  def can_arrange(arr) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/136","description":null,"tests":"defmodule HumanEval136Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval136.largest_smallest_integers([2, 4, 1, 3, 5, 7]) == {None, 1}\n    assert HumanEval136.largest_smallest_integers([2, 4, 1, 3, 5, 7, 0]) == {None, 1}\n    assert HumanEval136.largest_smallest_integers([1, 3, 2, 4, 5, 6, -2]) == {-2, 1}\n    assert HumanEval136.largest_smallest_integers([4, 5, 3, 6, 2, 7, -7]) == {-7, 2}\n    assert HumanEval136.largest_smallest_integers([7, 3, 8, 4, 9, 2, 5, -9]) == {-9, 2}\n    assert HumanEval136.largest_smallest_integers([]) == {None, None}\n    assert HumanEval136.largest_smallest_integers([0]) == {None, None}\n    assert HumanEval136.largest_smallest_integers([-1, -3, -5, -6]) == {-1, None}\n    assert HumanEval136.largest_smallest_integers([-1, -3, -5, -6, 0]) == {-1, None}\n    assert HumanEval136.largest_smallest_integers([-6, -4, -4, -3, 1]) == {-3, 1}\n    assert HumanEval136.largest_smallest_integers([-6, -4, -4, -3, -100, 1]) == {-3, 1}\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n  end\nend\n","code_context_before":"defmodule HumanEval136 do\n\n  @doc ~s\"\"\"\n  \n  Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as None.\n\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n  largest_smallest_integers([]) == (None, None)\n  largest_smallest_integers([0]) == (None, None)\n  \n  \"\"\"\n  def largest_smallest_integers(lst) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/137","description":null,"tests":"defmodule HumanEval137Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval137.compare_one(1, 2) == 2\n    assert HumanEval137.compare_one(1, 2.5) == 2.5\n    assert HumanEval137.compare_one(2, 3) == 3\n    assert HumanEval137.compare_one(5, 6) == 6\n    assert HumanEval137.compare_one(1, \"2,3\") == \"2,3\"\n    assert HumanEval137.compare_one(\"5,1\", \"6\") == \"6\"\n    assert HumanEval137.compare_one(\"1\", \"2\") == \"2\"\n    assert HumanEval137.compare_one(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval137 do\n\n  @doc ~s\"\"\"\n  \n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return None if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compare_one(1, 2.5) ➞ 2.5\n  compare_one(1, \"2,3\") ➞ \"2,3\"\n  compare_one(\"5,1\", \"6\") ➞ \"6\"\n  compare_one(\"1\", 1) ➞ None\n  \n  \"\"\"\n  def compare_one(a, b) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/138","description":null,"tests":"defmodule HumanEval138Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n    assert HumanEval138.is_equal_to_sum_even(4) == False\n    assert HumanEval138.is_equal_to_sum_even(6) == False\n    assert HumanEval138.is_equal_to_sum_even(8) == True\n    assert HumanEval138.is_equal_to_sum_even(10) == True\n    assert HumanEval138.is_equal_to_sum_even(11) == False\n    assert HumanEval138.is_equal_to_sum_even(12) == True\n    assert HumanEval138.is_equal_to_sum_even(13) == False\n    assert HumanEval138.is_equal_to_sum_even(16) == True\n\n  end\nend\n","code_context_before":"defmodule HumanEval138 do\n\n  @doc ~s\"\"\"\n  Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == False\n  is_equal_to_sum_even(6) == False\n  is_equal_to_sum_even(8) == True\n  \n  \"\"\"\n  def is_equal_to_sum_even(n) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/139","description":null,"tests":"defmodule HumanEval139Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval139.special_factorial(4) == 288\n    assert HumanEval139.special_factorial(5) == 34560\n    assert HumanEval139.special_factorial(7) == 125411328000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval139.special_factorial(1) == 1\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval139 do\n\n  @doc ~s\"\"\"\n  The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> special_factorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  \n  \"\"\"\n  def special_factorial(n) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/140","description":null,"tests":"defmodule HumanEval140Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval140.fix_spaces(\"Example\") == \"Example\"\n    assert HumanEval140.fix_spaces(\"Mudasir Hanif \") == \"Mudasir_Hanif_\"\n    assert HumanEval140.fix_spaces(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval140.fix_spaces(\"Exa   mple\") == \"Exa-mple\"\n    assert HumanEval140.fix_spaces(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\"\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval140 do\n\n  @doc ~s\"\"\"\n  \n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  \n  \"\"\"\n  def fix_spaces(text) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/141","description":null,"tests":"defmodule HumanEval141Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval141.file_name_check(\"example.txt\") == \"Yes\"\n    assert HumanEval141.file_name_check(\"1example.dll\") == \"No\"\n    assert HumanEval141.file_name_check(\"s1sdf3.asd\") == \"No\"\n    assert HumanEval141.file_name_check(\"K.dll\") == \"Yes\"\n    assert HumanEval141.file_name_check(\"MY16FILE3.exe\") == \"Yes\"\n    assert HumanEval141.file_name_check(\"His12FILE94.exe\") == \"No\"\n    assert HumanEval141.file_name_check(\"_Y.txt\") == \"No\"\n    assert HumanEval141.file_name_check(\"?aREYA.exe\") == \"No\"\n    assert HumanEval141.file_name_check(\"/this_is_valid.dll\") == \"No\"\n    assert HumanEval141.file_name_check(\"this_is_valid.wow\") == \"No\"\n    assert HumanEval141.file_name_check(\"this_is_valid.txt\") == \"Yes\"\n    assert HumanEval141.file_name_check(\"this_is_valid.txtexe\") == \"No\"\n    assert HumanEval141.file_name_check(\"#this2_i4s_5valid.ten\") == \"No\"\n    assert HumanEval141.file_name_check(\"@this1_is6_valid.exe\") == \"No\"\n    assert HumanEval141.file_name_check(\"this_is_12valid.6exe4.txt\") == \"No\"\n    assert HumanEval141.file_name_check(\"all.exe.txt\") == \"No\"\n    assert HumanEval141.file_name_check(\"I563_No.exe\") == \"Yes\"\n    assert HumanEval141.file_name_check(\"Is3youfault.txt\") == \"Yes\"\n    assert HumanEval141.file_name_check(\"no_one#knows.dll\") == \"Yes\"\n    assert HumanEval141.file_name_check(\"1I563_Yes3.exe\") == \"No\"\n    assert HumanEval141.file_name_check(\"I563_Yes3.txtt\") == \"No\"\n    assert HumanEval141.file_name_check(\"final..txt\") == \"No\"\n    assert HumanEval141.file_name_check(\"final132\") == \"No\"\n    assert HumanEval141.file_name_check(\"_f4indsartal132.\") == \"No\"\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval141.file_name_check(\".txt\") == \"No\"\n    assert HumanEval141.file_name_check(\"s.\") == \"No\"\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval141 do\n\n  @doc ~s\"\"\"\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  \n  \"\"\"\n  def file_name_check(file_name) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/142","description":null,"tests":"defmodule HumanEval142Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    \n    assert HumanEval142.sum_squares([1,2,3]) == 6\n    assert HumanEval142.sum_squares([1,4,9]) == 14\n    assert HumanEval142.sum_squares([]) == 0\n    assert HumanEval142.sum_squares([1,1,1,1,1,1,1,1,1]) == 9\n    assert HumanEval142.sum_squares([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert HumanEval142.sum_squares([0]) == 0\n    assert HumanEval142.sum_squares([-1,-5,2,-1,-5]) == -126\n    assert HumanEval142.sum_squares([-56,-99,1,0,-2]) == 3030\n    assert HumanEval142.sum_squares([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert HumanEval142.sum_squares([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert HumanEval142.sum_squares([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don\"t remove this line:\n\n  end\nend\n","code_context_before":"defmodule HumanEval142 do\n\n  @doc ~s\"\"\"\n  \"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  \n  \"\"\"\n  def sum_squares(lst) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/143","description":null,"tests":"defmodule HumanEval143Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval143.words_in_sentence(\"This is a test\") == \"is\"\n    assert HumanEval143.words_in_sentence(\"lets go for swimming\") == \"go for\"\n    assert HumanEval143.words_in_sentence(\"there is no place available here\") == \"there is no place\"\n    assert HumanEval143.words_in_sentence(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert HumanEval143.words_in_sentence(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval143.words_in_sentence(\"here\") == \"\"\n    assert HumanEval143.words_in_sentence(\"here is\") == \"is\"\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval143 do\n\n  @doc ~s\"\"\"\n  \n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  \n  \"\"\"\n  def words_in_sentence(sentence) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/144","description":null,"tests":"defmodule HumanEval144Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval144.simplify(\"1/5\", \"5/1\") == True\n    assert HumanEval144.simplify(\"1/6\", \"2/1\") == False\n    assert HumanEval144.simplify(\"5/1\", \"3/1\") == True\n    assert HumanEval144.simplify(\"7/10\", \"10/2\") == False\n    assert HumanEval144.simplify(\"2/10\", \"50/10\") == True\n    assert HumanEval144.simplify(\"7/2\", \"4/2\") == True\n    assert HumanEval144.simplify(\"11/6\", \"6/1\") == True\n    assert HumanEval144.simplify(\"2/3\", \"5/2\") == False\n    assert HumanEval144.simplify(\"5/2\", \"3/5\") == False\n    assert HumanEval144.simplify(\"2/4\", \"8/4\") == True\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval144.simplify(\"2/4\", \"4/2\") == True\n    assert HumanEval144.simplify(\"1/5\", \"5/1\") == True\n    assert HumanEval144.simplify(\"1/5\", \"1/5\") == False\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval144 do\n\n  @doc ~s\"\"\"\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns True if x * n evaluates to a whole number and False\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = True\n  simplify(\"1/6\", \"2/1\") = False\n  simplify(\"7/10\", \"10/2\") = False\n  \n  \"\"\"\n  def simplify(x, n) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/145","description":null,"tests":"defmodule HumanEval145Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval145.order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert HumanEval145.order_by_points([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert HumanEval145.order_by_points([]) == []\n    assert HumanEval145.order_by_points([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert HumanEval145.order_by_points([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert HumanEval145.order_by_points([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval145 do\n\n  @doc ~s\"\"\"\n  \n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order_by_points([]) == []\n  \n  \"\"\"\n  def order_by_points(nums) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/146","description":null,"tests":"defmodule HumanEval146Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval146.special_filter([5, -2, 1, -5]) == 0  \n    assert HumanEval146.special_filter([15, -73, 14, -15]) == 1\n    assert HumanEval146.special_filter([33, -2, -3, 45, 21, 109]) == 2\n    assert HumanEval146.special_filter([43, -12, 93, 125, 121, 109]) == 4\n    assert HumanEval146.special_filter([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval146.special_filter([1]) == 0              \n    assert HumanEval146.special_filter([]) == 0                   \n\n\n  end\nend\n","code_context_before":"defmodule HumanEval146 do\n\n  @doc ~s\"\"\"\n  Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  \n  \"\"\"\n  def special_filter(nums) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/147","description":null,"tests":"defmodule HumanEval147Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    assert HumanEval147.get_max_triples(5) == 1\n    assert HumanEval147.get_max_triples(6) == 4\n    assert HumanEval147.get_max_triples(10) == 36\n    assert HumanEval147.get_max_triples(100) == 53361\n\n  end\nend\n","code_context_before":"defmodule HumanEval147 do\n\n  @doc ~s\"\"\"\n  \n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  \n  \"\"\"\n  def get_max_triples(n) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/148","description":null,"tests":"defmodule HumanEval148Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    # Check some simple cases\nassert HumanEval148.bf(\"Jupiter\", \"Neptune\") == {\"Saturn\", \"Uranus\"}\nassert HumanEval148.bf(\"Earth\", \"Mercury\") == {\"Venus\"}\nassert HumanEval148.bf(\"Mercury\", \"Uranus\") == {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\nassert HumanEval148.bf(\"Neptune\", \"Venus\") == {\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"}  \n\n# Check some edge cases that are easy to work out by hand.\nassert HumanEval148.bf(\"Earth\", \"Earth\") == {}\nassert HumanEval148.bf(\"Mars\", \"Earth\") == {}\nassert HumanEval148.bf(\"Jupiter\", \"Makemake\") == {}\n\n  end\nend\n","code_context_before":"defmodule HumanEval148 do\n\n  @doc ~s\"\"\"\n  \n  There are eight planets in our solar system: the closerst to the Sun \n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2. \n  The function should return a tuple containing all planets whose orbits are \n  located between the orbit of planet1 and the orbit of planet2, sorted by \n  the proximity to the sun. \n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names. \n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  \n  \"\"\"\n  def bf(planet1, planet2) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/149","description":null,"tests":"defmodule HumanEval149Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval149.sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert HumanEval149.sorted_list_sum([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert HumanEval149.sorted_list_sum([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert HumanEval149.sorted_list_sum([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval149.sorted_list_sum([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert HumanEval149.sorted_list_sum([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert HumanEval149.sorted_list_sum([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval149 do\n\n  @doc ~s\"\"\"\n  Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  \n  \"\"\"\n  def sorted_list_sum(lst) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/150","description":null,"tests":"defmodule HumanEval150Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval150.x_or_y(7, 34, 12) == 34\n    assert HumanEval150.x_or_y(15, 8, 5) == 5\n    assert HumanEval150.x_or_y(3, 33, 5212) == 33\n    assert HumanEval150.x_or_y(1259, 3, 52) == 3\n    assert HumanEval150.x_or_y(7919, -1, 12) == -1\n    assert HumanEval150.x_or_y(3609, 1245, 583) == 583\n    assert HumanEval150.x_or_y(91, 56, 129) == 129\n    assert HumanEval150.x_or_y(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval150.x_or_y(1, 2, 0) == 0\n    assert HumanEval150.x_or_y(2, 2, 0) == 2\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval150 do\n\n  @doc ~s\"\"\"\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  \n  \"\"\"\n  def x_or_y(n, x, y) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/151","description":null,"tests":"defmodule HumanEval151Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    # Check some simple cases\nassert HumanEval151.double_the_difference([]) == 0 \nassert HumanEval151.double_the_difference([5, 4]) == 25 \nassert HumanEval151.double_the_difference([0.1, 0.2, 0.3]) == 0 \nassert HumanEval151.double_the_difference([-10, -20, -30]) == 0 \n\n# Check some edge cases that are easy to work out by hand.\nassert HumanEval151.double_the_difference([-1, -2, 8]) == 0\nassert HumanEval151.double_the_difference([0.2, 3, 5]) == 34\n\nlst = -99..100 |> Enum.filter(&(rem(&1, 2)!=0))\nodd_sum = lst |> Enum.filter(&(&1 > 0)) |> Enum.map(&(&1**2)) |> Enum.sum()\nassert HumanEval151.double_the_difference(lst) == odd_sum \n\n  end\nend\n","code_context_before":"defmodule HumanEval151 do\n\n  @doc ~s\"\"\"\n  \n  Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  \n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0  \n \n  If the input list is empty, return 0.\n  \n  \"\"\"\n  def double_the_difference(lst) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/152","description":null,"tests":"defmodule HumanEval152Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval152.compare([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert HumanEval152.compare([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert HumanEval152.compare([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert HumanEval152.compare([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval152 do\n\n  @doc ~s\"\"\"\n  I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  \n  \"\"\"\n  def compare(game,guess) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/153","description":null,"tests":"defmodule HumanEval153Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval153.strongest__extension(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\n    assert HumanEval153.strongest__extension(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\n    assert HumanEval153.strongest__extension(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\n    assert HumanEval153.strongest__extension(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\n    assert HumanEval153.strongest__extension(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\n    assert HumanEval153.strongest__extension(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\n    assert HumanEval153.strongest__extension(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval153.strongest__extension(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\"\n    assert HumanEval153.strongest__extension(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\"\n    \n\n  end\nend\n","code_context_before":"defmodule HumanEval153 do\n\n  @doc ~s\"\"\"\n  You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters \n  in the extension's name, the strength is given by the fraction CAP - SM. \n  You should find the strongest extension and return a string in this \n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n  (its strength is -1).\n  Example:\n  for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  \n  \"\"\"\n  def strongest__extension(class_name, extensions) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/154","description":null,"tests":"defmodule HumanEval154Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  HumanEval154.cycpattern_check(\"xyzw\",\"xyw\") == False \n    assert  HumanEval154.cycpattern_check(\"yello\",\"ell\") == True \n    assert  HumanEval154.cycpattern_check(\"whattup\",\"ptut\") == False \n    assert  HumanEval154.cycpattern_check(\"efef\",\"fee\") == True \n    assert  HumanEval154.cycpattern_check(\"abab\",\"aabb\") == False \n    assert  HumanEval154.cycpattern_check(\"winemtt\",\"tinem\") == True \n\n\n  end\nend\n","code_context_before":"defmodule HumanEval154 do\n\n  @doc ~s\"\"\"\n  You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => False\n  cycpattern_check(\"hello\",\"ell\") => True\n  cycpattern_check(\"whassup\",\"psus\") => False\n  cycpattern_check(\"abab\",\"baa\") => True\n  cycpattern_check(\"efef\",\"eeff\") => False\n  cycpattern_check(\"himenss\",\"simen\") => True\n\n  \n  \"\"\"\n  def cycpattern_check(a , b) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/155","description":null,"tests":"defmodule HumanEval155Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval155.even_odd_count(7) == {0, 1}\n    assert HumanEval155.even_odd_count(-78) == {1, 1}\n    assert HumanEval155.even_odd_count(3452) == {2, 2}\n    assert HumanEval155.even_odd_count(346211) == {3, 3}\n    assert HumanEval155.even_odd_count(-345821) == {3, 3}\n    assert HumanEval155.even_odd_count(-2) == {1, 0}\n    assert HumanEval155.even_odd_count(-45347) == {2, 3}\n    assert HumanEval155.even_odd_count(0) == {1, 0}\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval155 do\n\n  @doc ~s\"\"\"\n  Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  \n  \"\"\"\n  def even_odd_count(num) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/156","description":null,"tests":"defmodule HumanEval156Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval156.int_to_mini_roman(19) == \"xix\"\n    assert HumanEval156.int_to_mini_roman(152) == \"clii\"\n    assert HumanEval156.int_to_mini_roman(251) == \"ccli\"\n    assert HumanEval156.int_to_mini_roman(426) == \"cdxxvi\"\n    assert HumanEval156.int_to_mini_roman(500) == \"d\"\n    assert HumanEval156.int_to_mini_roman(1) == \"i\"\n    assert HumanEval156.int_to_mini_roman(4) == \"iv\"\n    assert HumanEval156.int_to_mini_roman(43) == \"xliii\"\n    assert HumanEval156.int_to_mini_roman(90) == \"xc\"\n    assert HumanEval156.int_to_mini_roman(94) == \"xciv\"\n    assert HumanEval156.int_to_mini_roman(532) == \"dxxxii\"\n    assert HumanEval156.int_to_mini_roman(900) == \"cm\"\n    assert HumanEval156.int_to_mini_roman(994) == \"cmxciv\"\n    assert HumanEval156.int_to_mini_roman(1000) == \"m\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval156 do\n\n  @doc ~s\"\"\"\n  \n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  \n  \"\"\"\n  def int_to_mini_roman(number) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/157","description":null,"tests":"defmodule HumanEval157Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval157.right_angle_triangle(3, 4, 5) == True\n    assert HumanEval157.right_angle_triangle(1, 2, 3) == False\n    assert HumanEval157.right_angle_triangle(10, 6, 8) == True\n    assert HumanEval157.right_angle_triangle(2, 2, 2) == False\n    assert HumanEval157.right_angle_triangle(7, 24, 25) == True\n    assert HumanEval157.right_angle_triangle(10, 5, 7) == False\n    assert HumanEval157.right_angle_triangle(5, 12, 13) == True\n    assert HumanEval157.right_angle_triangle(15, 8, 17) == True\n    assert HumanEval157.right_angle_triangle(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval157.right_angle_triangle(1, 1, 1) == False\n    assert HumanEval157.right_angle_triangle(2, 2, 10) == False\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval157 do\n\n  @doc ~s\"\"\"\n  \n  Given the lengths of the three sides of a triangle. Return True if the three\n  sides form a right-angled triangle, False otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or \n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == True\n  right_angle_triangle(1, 2, 3) == False\n  \n  \"\"\"\n  def right_angle_triangle(a, b, c) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/158","description":null,"tests":"defmodule HumanEval158Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert (HumanEval158.find_max([\"name\", \"of\", \"string\"]) == \"string\")\n    assert (HumanEval158.find_max([\"name\", \"enam\", \"game\"]) == \"enam\")\n    assert (HumanEval158.find_max([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n    assert (HumanEval158.find_max([\"abc\", \"cba\"]) == \"abc\")\n    assert (HumanEval158.find_max([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\")\n    assert (HumanEval158.find_max([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n    assert (HumanEval158.find_max([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n    assert (HumanEval158.find_max([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (HumanEval158.find_max([\"b\"]) == \"b\")\n    assert (HumanEval158.find_max([\"play\", \"play\", \"play\"]) == \"play\")\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval158 do\n\n  @doc ~s\"\"\"\n  Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) == \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n  find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n  \n  \"\"\"\n  def find_max(words) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/159","description":null,"tests":"defmodule HumanEval159Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert True\n    assert HumanEval159.eat(5, 6, 10) == [11, 4]\n    assert HumanEval159.eat(4, 8, 9) == [12, 1]\n    assert HumanEval159.eat(1, 10, 10) == [11, 0]\n    assert HumanEval159.eat(2, 11, 5) == [7, 0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n    assert HumanEval159.eat(4, 5, 7) == [9, 2]\n    assert HumanEval159.eat(4, 5, 1) == [5, 0]\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval159 do\n\n  @doc ~s\"\"\"\n  \n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  \n  \"\"\"\n  def eat(number, need, remaining) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/160","description":null,"tests":"defmodule HumanEval160Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval160.do_algebra([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n    assert HumanEval160.do_algebra([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n    assert HumanEval160.do_algebra([\"//\", \"*\"], [7, 3, 4]) == 8\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval160 do\n\n  @doc ~s\"\"\"\n  \n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  \n  \"\"\"\n  def do_algebra(operator, operand) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/161","description":null,"tests":"defmodule HumanEval161Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval161.solve(\"AsDf\") == \"aSdF\"\n    assert HumanEval161.solve(\"1234\") == \"4321\"\n    assert HumanEval161.solve(\"ab\") == \"AB\"\n    assert HumanEval161.solve(\"#a@C\") == \"#A@c\"\n    assert HumanEval161.solve(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert HumanEval161.solve(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert HumanEval161.solve(\"#$a^D\") == \"#$A^d\"\n    assert HumanEval161.solve(\"#ccc\") == \"#CCC\"\n\n    # Don\"t remove this line:\n\n  end\nend\n","code_context_before":"defmodule HumanEval161 do\n\n  @doc ~s\"\"\"\n  You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  \n  \"\"\"\n  def solve(s) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/162","description":null,"tests":"defmodule HumanEval162Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval162.string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n    assert HumanEval162.string_to_md5(\"\") == None\n    assert HumanEval162.string_to_md5(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\n    assert HumanEval162.string_to_md5(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval162 do\n\n  @doc ~s\"\"\"\n  \n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return None.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  \n  \"\"\"\n  def string_to_md5(text) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}
{"id":"HumanEval/163","description":null,"tests":"defmodule HumanEval163Test do\n  import ExUnit.Assertions\n\n  def run_tests() do\n    \n\n    # Check some simple cases\n    assert HumanEval163.generate_integers(2, 10) == [2, 4, 6, 8]\n    assert HumanEval163.generate_integers(10, 2) == [2, 4, 6, 8]\n    assert HumanEval163.generate_integers(132, 2) == [2, 4, 6, 8]\n    assert HumanEval163.generate_integers(17,89) == []\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n\n  end\nend\n","code_context_before":"defmodule HumanEval163 do\n\n  @doc ~s\"\"\"\n  \n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_integers(2, 8) => [2, 4, 6, 8]\n  generate_integers(8, 2) => [2, 4, 6, 8]\n  generate_integers(10, 14) => []\n  \n  \"\"\"\n  def generate_integers(a, b) do\n","code_context_after":"","surface_level_conditions":"","canonical_solution":null,"code_context_mix_setup":""}